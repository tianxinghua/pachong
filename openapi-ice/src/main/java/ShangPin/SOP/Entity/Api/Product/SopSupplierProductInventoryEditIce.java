// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SopSupplierProductInventoryEditIce.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Entity.Api.Product;

public class SopSupplierProductInventoryEditIce extends Ice.ObjectImpl
{
    public SopSupplierProductInventoryEditIce()
    {
    }

    public SopSupplierProductInventoryEditIce(int SopSkuNo, int InventoryQuantity, int RealInventoryQuantity, int LockInventoryQuantity, int PrewarningQuantity, int SupplyCycle, int InventoryStatus, String SopUserNo, String Freight, int FreightCurrency, String OldFreight, String OriginalPrice, int OriginalCurrency)
    {
        this.SopSkuNo = SopSkuNo;
        this.InventoryQuantity = InventoryQuantity;
        this.RealInventoryQuantity = RealInventoryQuantity;
        this.LockInventoryQuantity = LockInventoryQuantity;
        this.PrewarningQuantity = PrewarningQuantity;
        this.SupplyCycle = SupplyCycle;
        this.InventoryStatus = InventoryStatus;
        this.SopUserNo = SopUserNo;
        this.Freight = Freight;
        this.FreightCurrency = FreightCurrency;
        this.OldFreight = OldFreight;
        this.OriginalPrice = OriginalPrice;
        this.OriginalCurrency = OriginalCurrency;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new SopSupplierProductInventoryEditIce();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ShangPin::SOP::Entity::Api::Product::SopSupplierProductInventoryEditIce"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeInt(SopSkuNo);
        __os.writeInt(InventoryQuantity);
        __os.writeInt(RealInventoryQuantity);
        __os.writeInt(LockInventoryQuantity);
        __os.writeInt(PrewarningQuantity);
        __os.writeInt(SupplyCycle);
        __os.writeInt(InventoryStatus);
        __os.writeString(SopUserNo);
        __os.writeString(Freight);
        __os.writeInt(FreightCurrency);
        __os.writeString(OldFreight);
        __os.writeString(OriginalPrice);
        __os.writeInt(OriginalCurrency);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        SopSkuNo = __is.readInt();
        InventoryQuantity = __is.readInt();
        RealInventoryQuantity = __is.readInt();
        LockInventoryQuantity = __is.readInt();
        PrewarningQuantity = __is.readInt();
        SupplyCycle = __is.readInt();
        InventoryStatus = __is.readInt();
        SopUserNo = __is.readString();
        Freight = __is.readString();
        FreightCurrency = __is.readInt();
        OldFreight = __is.readString();
        OriginalPrice = __is.readString();
        OriginalCurrency = __is.readInt();
        __is.endReadSlice();
    }

    public int SopSkuNo;

    public int InventoryQuantity;

    public int RealInventoryQuantity;

    public int LockInventoryQuantity;

    public int PrewarningQuantity;

    public int SupplyCycle;

    public int InventoryStatus;

    public String SopUserNo;

    public String Freight;

    public int FreightCurrency;

    public String OldFreight;

    public String OriginalPrice;

    public int OriginalCurrency;

    public static final long serialVersionUID = -985453310L;
}
