// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OpenApiServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Servant;

public abstract class _OpenApiServantDisp extends Ice.ObjectImpl implements OpenApiServant
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ShangPin::SOP::Servant::OpenApiServant"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final boolean AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<String> purchaseOrderDetailNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null);
    }

    public final String CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder)
        throws ShangPin.SOP.Api.ApiException
    {
        return CreateDeliveryOrder(supplierId, deliverOrder, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<String> ProductNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopProductSkuPage FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfoPage(supplierId, query, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrder(String supplierId, String deliveryOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrder(supplierId, deliveryOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderPaged(supplierId, queryDto, null);
    }

    public final boolean FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderSend(supplierId, deliveryOrderSend, null);
    }

    public final ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] FindMoneyInfo()
        throws ShangPin.SOP.Api.ApiException
    {
        return FindMoneyInfo(null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrder(String supplierId, String returnOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrder(supplierId, returnOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrderPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindStockInfo(String supplierId, java.util.List<String> SkuNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindStockInfo(supplierId, SkuNos, null);
    }

    public final java.util.Map<String, String> FindSuppliersById(String Id)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersById(Id, null);
    }

    public final java.util.Map<String, String> FindSuppliersByName(String Name)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersByName(Name, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSupplyInfo(supplierId, supply, null);
    }

    public final boolean UpdateStock(String supplierId, String SkuNo, int InventoryQuantity)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStock(supplierId, SkuNo, InventoryQuantity, null);
    }

    public final boolean UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPrice(supplierId, price, null);
    }

    public static Ice.DispatchStatus ___FindSupplyInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SupplyHolder supply = new ShangPin.SOP.Entity.Api.Product.SupplyHolder();
        supplierId = __is.readString();
        __is.readObject(supply);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] __ret = __obj.FindSupplyInfo(supplierId, supply.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopSkuPriceApplyIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateSupplyPrice(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder price = new ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder();
        supplierId = __is.readString();
        __is.readObject(price);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateSupplyPrice(supplierId, price.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindStockInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        java.util.List<String> SkuNos;
        supplierId = __is.readString();
        SkuNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret = __obj.FindStockInfo(supplierId, SkuNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopSkuInventoryIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateStock(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SkuNo;
        int InventoryQuantity;
        supplierId = __is.readString();
        SkuNo = __is.readString();
        InventoryQuantity = __is.readInt();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateStock(supplierId, SkuNo, InventoryQuantity, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCommodityInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String Starttime;
        String Endtime;
        java.util.List<String> ProductNos;
        supplierId = __is.readString();
        Starttime = __is.readString();
        Endtime = __is.readString();
        ProductNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] __ret = __obj.FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopProductSkuIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCommodityInfoPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQueryHolder query = new ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQueryHolder();
        supplierId = __is.readString();
        __is.readObject(query);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopProductSkuPage __ret = __obj.FindCommodityInfoPage(supplierId, query.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindMoneyInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        try
        {
            ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] __ret = __obj.FindMoneyInfo(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopCurrencyIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSuppliersById(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String Id;
        Id = __is.readString();
        __inS.endReadParams();
        try
        {
            java.util.Map<String, String> __ret = __obj.FindSuppliersById(Id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SuppliersMapHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSuppliersByName(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String Name;
        Name = __is.readString();
        __inS.endReadParams();
        try
        {
            java.util.Map<String, String> __ret = __obj.FindSuppliersByName(Name, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SuppliersMapHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___CreateDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAddHolder deliverOrder = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAddHolder();
        supplierId = __is.readString();
        __is.readObject(deliverOrder);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.CreateDeliveryOrder(supplierId, deliverOrder.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddPurchaseDetailToDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String deliveryOrderNo;
        java.util.List<String> purchaseOrderDetailNos;
        supplierId = __is.readString();
        deliveryOrderNo = __is.readString();
        purchaseOrderDetailNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetailPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage __ret = __obj.FindPurchaseOrderDetailPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetail(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String purchaseOrderNo;
        supplierId = __is.readString();
        purchaseOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage __ret = __obj.FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindReturnOrderPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage __ret = __obj.FindReturnOrderPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindReturnOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String returnOrderNo;
        supplierId = __is.readString();
        returnOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage __ret = __obj.FindReturnOrder(supplierId, returnOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrderPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage __ret = __obj.FindDeliveryOrderPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String deliveryOrderNo;
        supplierId = __is.readString();
        deliveryOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage __ret = __obj.FindDeliveryOrder(supplierId, deliveryOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrderSend(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSendHolder deliveryOrderSend = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSendHolder();
        supplierId = __is.readString();
        __is.readObject(deliveryOrderSend);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.FindDeliveryOrderSend(supplierId, deliveryOrderSend.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "AddPurchaseDetailToDeliveryOrder",
        "CreateDeliveryOrder",
        "FindCommodityInfo",
        "FindCommodityInfoPage",
        "FindDeliveryOrder",
        "FindDeliveryOrderPaged",
        "FindDeliveryOrderSend",
        "FindMoneyInfo",
        "FindPurchaseOrderDetail",
        "FindPurchaseOrderDetailPaged",
        "FindReturnOrder",
        "FindReturnOrderPaged",
        "FindStockInfo",
        "FindSuppliersById",
        "FindSuppliersByName",
        "FindSupplyInfo",
        "UpdateStock",
        "UpdateSupplyPrice",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___AddPurchaseDetailToDeliveryOrder(this, in, __current);
            }
            case 1:
            {
                return ___CreateDeliveryOrder(this, in, __current);
            }
            case 2:
            {
                return ___FindCommodityInfo(this, in, __current);
            }
            case 3:
            {
                return ___FindCommodityInfoPage(this, in, __current);
            }
            case 4:
            {
                return ___FindDeliveryOrder(this, in, __current);
            }
            case 5:
            {
                return ___FindDeliveryOrderPaged(this, in, __current);
            }
            case 6:
            {
                return ___FindDeliveryOrderSend(this, in, __current);
            }
            case 7:
            {
                return ___FindMoneyInfo(this, in, __current);
            }
            case 8:
            {
                return ___FindPurchaseOrderDetail(this, in, __current);
            }
            case 9:
            {
                return ___FindPurchaseOrderDetailPaged(this, in, __current);
            }
            case 10:
            {
                return ___FindReturnOrder(this, in, __current);
            }
            case 11:
            {
                return ___FindReturnOrderPaged(this, in, __current);
            }
            case 12:
            {
                return ___FindStockInfo(this, in, __current);
            }
            case 13:
            {
                return ___FindSuppliersById(this, in, __current);
            }
            case 14:
            {
                return ___FindSuppliersByName(this, in, __current);
            }
            case 15:
            {
                return ___FindSupplyInfo(this, in, __current);
            }
            case 16:
            {
                return ___UpdateStock(this, in, __current);
            }
            case 17:
            {
                return ___UpdateSupplyPrice(this, in, __current);
            }
            case 18:
            {
                return ___ice_id(this, in, __current);
            }
            case 19:
            {
                return ___ice_ids(this, in, __current);
            }
            case 20:
            {
                return ___ice_isA(this, in, __current);
            }
            case 21:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
