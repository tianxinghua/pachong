// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OpenApiServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Servant;

public abstract class _OpenApiServantDisp extends Ice.ObjectImpl implements OpenApiServant
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ShangPin::SOP::Servant::OpenApiServant"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final int AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodity(supplierId, productAdd, null);
    }

    public final boolean AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodityPic(supplierId, ProductPicIce, null);
    }

    public final boolean AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null);
    }

    public final boolean AddSecondReturnOrderAbnormalPic(String supplierId, int detailId, byte[] sbnormalpic)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddSecondReturnOrderAbnormalPic(supplierId, detailId, sbnormalpic, null);
    }

    public final String AddSkuChangeMarketPriceMsg(String supplierId, ShangPin.SOP.Entity.Api.Product.SopSkuChangeMarketPriceMsgEntity[] priceMsgList)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddSkuChangeMarketPriceMsg(supplierId, priceMsgList, null);
    }

    public final String CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder)
        throws ShangPin.SOP.Api.ApiException
    {
        return CreateDeliveryOrder(supplierId, deliverOrder, null);
    }

    public final String DeleteProduct(String supplierId, String SkuNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return DeleteProduct(supplierId, SkuNo, null);
    }

    public final boolean DirectUpdateStock(String supplierId, String SkuNo, String SupplierSkuNo, int InventoryQuantity, String PrewarningQuantity, String Freight)
        throws ShangPin.SOP.Api.ApiException
    {
        return DirectUpdateStock(supplierId, SkuNo, SupplierSkuNo, InventoryQuantity, PrewarningQuantity, Freight, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopAreaPage FindAreaPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindAreaPage(supplierId, pageIndex, pageSize, null);
    }

    public final String FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, null);
    }

    public final ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementPage FindCategoryBrandAgreementPage(String supplierId, ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementQuery query)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCategoryBrandAgreementPage(supplierId, query, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopProductSkuPage FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfoPage(supplierId, query, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrder(String supplierId, String deliveryOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrder(supplierId, deliveryOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderPaged(supplierId, queryDto, null);
    }

    public final boolean FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderSend(supplierId, deliveryOrderSend, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindDirectStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.List<java.lang.String> SupplierSkuNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDirectStockInfo(supplierId, SkuNos, SupplierSkuNos, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderApi FindDirectoryPurchaseOrder(String supplierId, String purchaseOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDirectoryPurchaseOrder(supplierId, purchaseOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrder FindDirectoryPurchaseOrderDetail(String supplierId, String purchaseOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDirectoryPurchaseOrderDetail(supplierId, purchaseOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderDetailPage FindDirectoryPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDirectoryPurchaseOrderDetailPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderPage FindDirectoryPurchaseOrderPage(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDirectoryPurchaseOrderPage(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] FindMoneyInfo()
        throws ShangPin.SOP.Api.ApiException
    {
        return FindMoneyInfo(null);
    }

    public final String FindNetworkSpreadOrders(String appKey, String appSerect, String startDate, String endDate, String orderNo, String supplierOrderNo, String skuNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindNetworkSpreadOrders(appKey, appSerect, startDate, endDate, orderNo, supplierOrderNo, skuNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopProductPricePage FindProductPrice(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindProductPrice(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null);
    }

    public final ShangPin.SOP.Entity.DTO.PurchaseOrderInfoApiDto FindPurchaseOrderDetailCountPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailCountPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrder(String supplierId, String returnOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrder(supplierId, returnOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrderPaged(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrder FindSecondReturnOrderByReturnNo(String supplierId, String returnOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSecondReturnOrderByReturnNo(supplierId, returnOrderNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderPage FindSecondReturnOrderList(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.SecondReturnOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSecondReturnOrderList(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryPage FindSopProductInventoryList(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.SopSkuInventoryQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSopProductInventoryList(supplierId, queryDto, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpBrandPage FindSpBrandPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpBrandPage(supplierId, pageIndex, pageSize, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpCategoryPage FindSpCategoryPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategoryPage(supplierId, pageIndex, pageSize, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] FindSpCategorySizeStandard(String supplierId, String CategoryNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategorySizeStandard(supplierId, CategoryNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce FindSpSizeTmp(String supplierId, String SizeTmpNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSizeTmp(supplierId, SizeTmpNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSpfProductAttributeInfo(supplierId, CategoryNo, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] FindSpfProductMainColor(String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpfProductMainColor(supplierId, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindStockInfo(supplierId, SkuNos, null);
    }

    public final java.util.Map<java.lang.String, java.lang.String> FindSuppliersById(String Id)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersById(Id, null);
    }

    public final java.util.Map<java.lang.String, java.lang.String> FindSuppliersByName(String Name)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersByName(Name, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSupplyInfo(supplierId, supply, null);
    }

    public final ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyPage FindSupplyInfoPage(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDto supply)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSupplyInfoPage(supplierId, supply, null);
    }

    public final java.util.List<java.lang.String> GetLogisticsCompany(String supplierId, String logisticsName)
        throws ShangPin.SOP.Api.ApiException
    {
        return GetLogisticsCompany(supplierId, logisticsName, null);
    }

    public final ShangPin.SOP.Entity.Api.Supplier.SopInfoAPIEntity GetSupplierInfo(String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return GetSupplierInfo(supplierId, null);
    }

    public final boolean ModifySkuInventoryQuantity(String supplierId, ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryEditIce productInventory)
        throws ShangPin.SOP.Api.ApiException
    {
        return ModifySkuInventoryQuantity(supplierId, productInventory, null);
    }

    public final String PurchaseDetailError(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return PurchaseDetailError(purchaseOrderEx, supplierId, null);
    }

    public final String PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return PurchaseDetailEx(purchaseOrderEx, supplierId, null);
    }

    public final boolean ReceiveSecondReturnOrder(String supplierId, String returnOrderNo, String returnOrderDetailId)
        throws ShangPin.SOP.Api.ApiException
    {
        return ReceiveSecondReturnOrder(supplierId, returnOrderNo, returnOrderDetailId, null);
    }

    public final String SendArrivalAbnormalProcess(String supplierId, ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderAbnormal purchaseOrderAbnormal)
        throws ShangPin.SOP.Api.ApiException
    {
        return SendArrivalAbnormalProcess(supplierId, purchaseOrderAbnormal, null);
    }

    public final String SendDirectoryDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.SendDeliveryOrder sendDeliveryOrder)
        throws ShangPin.SOP.Api.ApiException
    {
        return SendDirectoryDeliveryOrder(supplierId, sendDeliveryOrder, null);
    }

    public final String SendDirectoryDeliveryOrderError(String supplierId, ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx deliveryOrderEx)
        throws ShangPin.SOP.Api.ApiException
    {
        return SendDirectoryDeliveryOrderError(supplierId, deliveryOrderEx, null);
    }

    public final boolean SubmitSecondReturnOrderAbnormal(String supplierId, ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderSupply secondReturnOrderDetail)
        throws ShangPin.SOP.Api.ApiException
    {
        return SubmitSecondReturnOrderAbnormal(supplierId, secondReturnOrderDetail, null);
    }

    public final boolean UpdateProductPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductPriceEditIce productPrice)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateProductPrice(supplierId, productPrice, null);
    }

    public final boolean UpdateStock(String supplierId, String SkuNo, int InventoryQuantity)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStock(supplierId, SkuNo, InventoryQuantity, null);
    }

    public final boolean UpdateStockList(String supplierId, ShangPin.SOP.Entity.Api.Product.SopInventoryQuantityDto[] updateList)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStockList(supplierId, updateList, null);
    }

    public final boolean UpdateStockNew(String supplierId, String SkuNo, String SupplierSkuNo, int InventoryQuantity)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStockNew(supplierId, SkuNo, SupplierSkuNo, InventoryQuantity, null);
    }

    public final boolean UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPrice(supplierId, price, null);
    }

    public final boolean UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPriceSpecial(supplierId, price, null);
    }

    public static Ice.DispatchStatus ___FindSupplyInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SupplyHolder supply = new ShangPin.SOP.Entity.Api.Product.SupplyHolder();
        supplierId = __is.readString();
        __is.readObject(supply);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] __ret = __obj.FindSupplyInfo(supplierId, supply.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopSkuPriceApplyIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateSupplyPrice(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder price = new ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder();
        supplierId = __is.readString();
        __is.readObject(price);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateSupplyPrice(supplierId, price.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindStockInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        java.util.List<java.lang.String> SkuNos;
        supplierId = __is.readString();
        SkuNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret = __obj.FindStockInfo(supplierId, SkuNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopSkuInventoryIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateStock(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SkuNo;
        int InventoryQuantity;
        supplierId = __is.readString();
        SkuNo = __is.readString();
        InventoryQuantity = __is.readInt();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateStock(supplierId, SkuNo, InventoryQuantity, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCommodityInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String Starttime;
        String Endtime;
        java.util.List<java.lang.String> ProductNos;
        java.util.List<java.lang.String> ProductModels;
        supplierId = __is.readString();
        Starttime = __is.readString();
        Endtime = __is.readString();
        ProductNos = StringListHelper.read(__is);
        ProductModels = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] __ret = __obj.FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopProductSkuIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCommodityInfoPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQueryHolder query = new ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQueryHolder();
        supplierId = __is.readString();
        __is.readObject(query);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopProductSkuPage __ret = __obj.FindCommodityInfoPage(supplierId, query.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindMoneyInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        try
        {
            ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] __ret = __obj.FindMoneyInfo(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopCurrencyIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSuppliersById(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String Id;
        Id = __is.readString();
        __inS.endReadParams();
        try
        {
            java.util.Map<java.lang.String, java.lang.String> __ret = __obj.FindSuppliersById(Id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SuppliersMapHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSuppliersByName(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String Name;
        Name = __is.readString();
        __inS.endReadParams();
        try
        {
            java.util.Map<java.lang.String, java.lang.String> __ret = __obj.FindSuppliersByName(Name, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SuppliersMapHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___CreateDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAddHolder deliverOrder = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAddHolder();
        supplierId = __is.readString();
        __is.readObject(deliverOrder);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.CreateDeliveryOrder(supplierId, deliverOrder.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddPurchaseDetailToDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String deliveryOrderNo;
        java.util.List<java.lang.String> purchaseOrderDetailNos;
        supplierId = __is.readString();
        deliveryOrderNo = __is.readString();
        purchaseOrderDetailNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetailPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage __ret = __obj.FindPurchaseOrderDetailPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetail(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String purchaseOrderNo;
        supplierId = __is.readString();
        purchaseOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage __ret = __obj.FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindReturnOrderPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage __ret = __obj.FindReturnOrderPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindReturnOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String returnOrderNo;
        supplierId = __is.readString();
        returnOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage __ret = __obj.FindReturnOrder(supplierId, returnOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrderPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage __ret = __obj.FindDeliveryOrderPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String deliveryOrderNo;
        supplierId = __is.readString();
        deliveryOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage __ret = __obj.FindDeliveryOrder(supplierId, deliveryOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDeliveryOrderSend(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSendHolder deliveryOrderSend = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSendHolder();
        supplierId = __is.readString();
        __is.readObject(deliveryOrderSend);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.FindDeliveryOrderSend(supplierId, deliveryOrderSend.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpCategoryPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        int pageIndex;
        int pageSize;
        supplierId = __is.readString();
        pageIndex = __is.readInt();
        pageSize = __is.readInt();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpCategoryPage __ret = __obj.FindSpCategoryPage(supplierId, pageIndex, pageSize, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpBrandPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        int pageIndex;
        int pageSize;
        supplierId = __is.readString();
        pageIndex = __is.readInt();
        pageSize = __is.readInt();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpBrandPage __ret = __obj.FindSpBrandPage(supplierId, pageIndex, pageSize, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpSizeTmp(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SizeTmpNo;
        supplierId = __is.readString();
        SizeTmpNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce __ret = __obj.FindSpSizeTmp(supplierId, SizeTmpNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpSpfProductAttributeInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String CategoryNo;
        supplierId = __is.readString();
        CategoryNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] __ret = __obj.FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            RSpfProductAttributeInfoIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindAreaPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        int pageIndex;
        int pageSize;
        supplierId = __is.readString();
        pageIndex = __is.readInt();
        pageSize = __is.readInt();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopAreaPage __ret = __obj.FindAreaPage(supplierId, pageIndex, pageSize, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpCategorySizeStandard(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String CategoryNo;
        supplierId = __is.readString();
        CategoryNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] __ret = __obj.FindSpCategorySizeStandard(supplierId, CategoryNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            RSpCategorySizeStandardListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSpfProductMainColor(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        supplierId = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] __ret = __obj.FindSpfProductMainColor(supplierId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            RSpfProductMainColorListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddCommodity(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.ProductAddIceHolder productAdd = new ShangPin.SOP.Entity.Api.Product.ProductAddIceHolder();
        supplierId = __is.readString();
        __is.readObject(productAdd);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.AddCommodity(supplierId, productAdd.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddCommodityPic(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.ProductPicIceHolder ProductPicIce = new ShangPin.SOP.Entity.Api.Product.ProductPicIceHolder();
        supplierId = __is.readString();
        __is.readObject(ProductPicIce);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.AddCommodityPic(supplierId, ProductPicIce.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___PurchaseDetailEx(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder purchaseOrderEx = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder();
        String supplierId;
        __is.readObject(purchaseOrderEx);
        supplierId = __is.readString();
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.PurchaseDetailEx(purchaseOrderEx.value, supplierId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCategoryBrandAgreement(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String categoryNo;
        String brandNo;
        supplierId = __is.readString();
        categoryNo = __is.readString();
        brandNo = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateSupplyPriceSpecial(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder price = new ShangPin.SOP.Entity.Api.Product.SupplyPriceInfoHolder();
        supplierId = __is.readString();
        __is.readObject(price);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateSupplyPriceSpecial(supplierId, price.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetailSpecial(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String purchaseOrderNo;
        String orderNo;
        supplierId = __is.readString();
        purchaseOrderNo = __is.readString();
        orderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage __ret = __obj.FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDirectoryPurchaseOrderDetailPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderDetailPage __ret = __obj.FindDirectoryPurchaseOrderDetailPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDirectoryPurchaseOrderDetail(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String purchaseOrderNo;
        supplierId = __is.readString();
        purchaseOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrder __ret = __obj.FindDirectoryPurchaseOrderDetail(supplierId, purchaseOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___SendDirectoryDeliveryOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.SendDeliveryOrderHolder sendDeliveryOrder = new ShangPin.SOP.Entity.Api.Purchase.SendDeliveryOrderHolder();
        supplierId = __is.readString();
        __is.readObject(sendDeliveryOrder);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.SendDirectoryDeliveryOrder(supplierId, sendDeliveryOrder.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___SendDirectoryDeliveryOrderError(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder deliveryOrderEx = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder();
        supplierId = __is.readString();
        __is.readObject(deliveryOrderEx);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.SendDirectoryDeliveryOrderError(supplierId, deliveryOrderEx.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___SendArrivalAbnormalProcess(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderAbnormalHolder purchaseOrderAbnormal = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderAbnormalHolder();
        supplierId = __is.readString();
        __is.readObject(purchaseOrderAbnormal);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.SendArrivalAbnormalProcess(supplierId, purchaseOrderAbnormal.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindProductPrice(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopProductPricePage __ret = __obj.FindProductPrice(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateProductPrice(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopProductPriceEditIceHolder productPrice = new ShangPin.SOP.Entity.Api.Product.SopProductPriceEditIceHolder();
        supplierId = __is.readString();
        __is.readObject(productPrice);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateProductPrice(supplierId, productPrice.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSecondReturnOrderList(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.SecondReturnOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.SecondReturnOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderPage __ret = __obj.FindSecondReturnOrderList(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSecondReturnOrderByReturnNo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String returnOrderNo;
        supplierId = __is.readString();
        returnOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrder __ret = __obj.FindSecondReturnOrderByReturnNo(supplierId, returnOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___ReceiveSecondReturnOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String returnOrderNo;
        String returnOrderDetailId;
        supplierId = __is.readString();
        returnOrderNo = __is.readString();
        returnOrderDetailId = __is.readString();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.ReceiveSecondReturnOrder(supplierId, returnOrderNo, returnOrderDetailId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___SubmitSecondReturnOrderAbnormal(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderSupplyHolder secondReturnOrderDetail = new ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderSupplyHolder();
        supplierId = __is.readString();
        __is.readObject(secondReturnOrderDetail);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.SubmitSecondReturnOrderAbnormal(supplierId, secondReturnOrderDetail.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSupplyInfoPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDtoHolder supply = new ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(supply);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyPage __ret = __obj.FindSupplyInfoPage(supplierId, supply.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindSopProductInventoryList(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Product.SopSkuInventoryQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Product.SopSkuInventoryQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryPage __ret = __obj.FindSopProductInventoryList(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___ModifySkuInventoryQuantity(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryEditIceHolder productInventory = new ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryEditIceHolder();
        supplierId = __is.readString();
        __is.readObject(productInventory);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.ModifySkuInventoryQuantity(supplierId, productInventory.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddSecondReturnOrderAbnormalPic(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        int detailId;
        byte[] sbnormalpic;
        supplierId = __is.readString();
        detailId = __is.readInt();
        sbnormalpic = ImageByteArrayHelper.read(__is);
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.AddSecondReturnOrderAbnormalPic(supplierId, detailId, sbnormalpic, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___PurchaseDetailError(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder purchaseOrderEx = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderExHolder();
        String supplierId;
        __is.readObject(purchaseOrderEx);
        supplierId = __is.readString();
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.PurchaseDetailError(purchaseOrderEx.value, supplierId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindCategoryBrandAgreementPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementQueryHolder query = new ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementQueryHolder();
        supplierId = __is.readString();
        __is.readObject(query);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementPage __ret = __obj.FindCategoryBrandAgreementPage(supplierId, query.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDirectoryPurchaseOrderPage(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderPage __ret = __obj.FindDirectoryPurchaseOrderPage(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___GetLogisticsCompany(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String logisticsName;
        supplierId = __is.readString();
        logisticsName = __is.readString();
        __inS.endReadParams();
        try
        {
            java.util.List<java.lang.String> __ret = __obj.GetLogisticsCompany(supplierId, logisticsName, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            StringListHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___DirectUpdateStock(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SkuNo;
        String SupplierSkuNo;
        int InventoryQuantity;
        String PrewarningQuantity;
        String Freight;
        supplierId = __is.readString();
        SkuNo = __is.readString();
        SupplierSkuNo = __is.readString();
        InventoryQuantity = __is.readInt();
        PrewarningQuantity = __is.readString();
        Freight = __is.readString();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.DirectUpdateStock(supplierId, SkuNo, SupplierSkuNo, InventoryQuantity, PrewarningQuantity, Freight, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDirectoryPurchaseOrder(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String purchaseOrderNo;
        supplierId = __is.readString();
        purchaseOrderNo = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderApi __ret = __obj.FindDirectoryPurchaseOrder(supplierId, purchaseOrderNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateStockNew(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SkuNo;
        String SupplierSkuNo;
        int InventoryQuantity;
        supplierId = __is.readString();
        SkuNo = __is.readString();
        SupplierSkuNo = __is.readString();
        InventoryQuantity = __is.readInt();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateStockNew(supplierId, SkuNo, SupplierSkuNo, InventoryQuantity, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindDirectStockInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        java.util.List<java.lang.String> SkuNos;
        java.util.List<java.lang.String> SupplierSkuNos;
        supplierId = __is.readString();
        SkuNos = StringListHelper.read(__is);
        SupplierSkuNos = StringListHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret = __obj.FindDirectStockInfo(supplierId, SkuNos, SupplierSkuNos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SopSkuInventoryIceListHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___DeleteProduct(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        String SkuNo;
        supplierId = __is.readString();
        SkuNo = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.DeleteProduct(supplierId, SkuNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindPurchaseOrderDetailCountPaged(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder queryDto = new ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDtoHolder();
        supplierId = __is.readString();
        __is.readObject(queryDto);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.DTO.PurchaseOrderInfoApiDto __ret = __obj.FindPurchaseOrderDetailCountPaged(supplierId, queryDto.value, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FindNetworkSpreadOrders(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appKey;
        String appSerect;
        String startDate;
        String endDate;
        String orderNo;
        String supplierOrderNo;
        String skuNo;
        appKey = __is.readString();
        appSerect = __is.readString();
        startDate = __is.readString();
        endDate = __is.readString();
        orderNo = __is.readString();
        supplierOrderNo = __is.readString();
        skuNo = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.FindNetworkSpreadOrders(appKey, appSerect, startDate, endDate, orderNo, supplierOrderNo, skuNo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___UpdateStockList(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopInventoryQuantityDto[] updateList;
        supplierId = __is.readString();
        updateList = SopInventoryQuantityDtoListHelper.read(__is);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.UpdateStockList(supplierId, updateList, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___AddSkuChangeMarketPriceMsg(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        ShangPin.SOP.Entity.Api.Product.SopSkuChangeMarketPriceMsgEntity[] priceMsgList;
        supplierId = __is.readString();
        priceMsgList = SopSkuChangeMarketPriceMsgEntityListHelper.read(__is);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.AddSkuChangeMarketPriceMsg(supplierId, priceMsgList, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___GetSupplierInfo(OpenApiServant __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String supplierId;
        supplierId = __is.readString();
        __inS.endReadParams();
        try
        {
            ShangPin.SOP.Entity.Api.Supplier.SopInfoAPIEntity __ret = __obj.GetSupplierInfo(supplierId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(__ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(ShangPin.SOP.Api.ApiException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "AddCommodity",
        "AddCommodityPic",
        "AddPurchaseDetailToDeliveryOrder",
        "AddSecondReturnOrderAbnormalPic",
        "AddSkuChangeMarketPriceMsg",
        "CreateDeliveryOrder",
        "DeleteProduct",
        "DirectUpdateStock",
        "FindAreaPage",
        "FindCategoryBrandAgreement",
        "FindCategoryBrandAgreementPage",
        "FindCommodityInfo",
        "FindCommodityInfoPage",
        "FindDeliveryOrder",
        "FindDeliveryOrderPaged",
        "FindDeliveryOrderSend",
        "FindDirectStockInfo",
        "FindDirectoryPurchaseOrder",
        "FindDirectoryPurchaseOrderDetail",
        "FindDirectoryPurchaseOrderDetailPaged",
        "FindDirectoryPurchaseOrderPage",
        "FindMoneyInfo",
        "FindNetworkSpreadOrders",
        "FindProductPrice",
        "FindPurchaseOrderDetail",
        "FindPurchaseOrderDetailCountPaged",
        "FindPurchaseOrderDetailPaged",
        "FindPurchaseOrderDetailSpecial",
        "FindReturnOrder",
        "FindReturnOrderPaged",
        "FindSecondReturnOrderByReturnNo",
        "FindSecondReturnOrderList",
        "FindSopProductInventoryList",
        "FindSpBrandPage",
        "FindSpCategoryPage",
        "FindSpCategorySizeStandard",
        "FindSpSizeTmp",
        "FindSpSpfProductAttributeInfo",
        "FindSpfProductMainColor",
        "FindStockInfo",
        "FindSuppliersById",
        "FindSuppliersByName",
        "FindSupplyInfo",
        "FindSupplyInfoPage",
        "GetLogisticsCompany",
        "GetSupplierInfo",
        "ModifySkuInventoryQuantity",
        "PurchaseDetailError",
        "PurchaseDetailEx",
        "ReceiveSecondReturnOrder",
        "SendArrivalAbnormalProcess",
        "SendDirectoryDeliveryOrder",
        "SendDirectoryDeliveryOrderError",
        "SubmitSecondReturnOrderAbnormal",
        "UpdateProductPrice",
        "UpdateStock",
        "UpdateStockList",
        "UpdateStockNew",
        "UpdateSupplyPrice",
        "UpdateSupplyPriceSpecial",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___AddCommodity(this, in, __current);
            }
            case 1:
            {
                return ___AddCommodityPic(this, in, __current);
            }
            case 2:
            {
                return ___AddPurchaseDetailToDeliveryOrder(this, in, __current);
            }
            case 3:
            {
                return ___AddSecondReturnOrderAbnormalPic(this, in, __current);
            }
            case 4:
            {
                return ___AddSkuChangeMarketPriceMsg(this, in, __current);
            }
            case 5:
            {
                return ___CreateDeliveryOrder(this, in, __current);
            }
            case 6:
            {
                return ___DeleteProduct(this, in, __current);
            }
            case 7:
            {
                return ___DirectUpdateStock(this, in, __current);
            }
            case 8:
            {
                return ___FindAreaPage(this, in, __current);
            }
            case 9:
            {
                return ___FindCategoryBrandAgreement(this, in, __current);
            }
            case 10:
            {
                return ___FindCategoryBrandAgreementPage(this, in, __current);
            }
            case 11:
            {
                return ___FindCommodityInfo(this, in, __current);
            }
            case 12:
            {
                return ___FindCommodityInfoPage(this, in, __current);
            }
            case 13:
            {
                return ___FindDeliveryOrder(this, in, __current);
            }
            case 14:
            {
                return ___FindDeliveryOrderPaged(this, in, __current);
            }
            case 15:
            {
                return ___FindDeliveryOrderSend(this, in, __current);
            }
            case 16:
            {
                return ___FindDirectStockInfo(this, in, __current);
            }
            case 17:
            {
                return ___FindDirectoryPurchaseOrder(this, in, __current);
            }
            case 18:
            {
                return ___FindDirectoryPurchaseOrderDetail(this, in, __current);
            }
            case 19:
            {
                return ___FindDirectoryPurchaseOrderDetailPaged(this, in, __current);
            }
            case 20:
            {
                return ___FindDirectoryPurchaseOrderPage(this, in, __current);
            }
            case 21:
            {
                return ___FindMoneyInfo(this, in, __current);
            }
            case 22:
            {
                return ___FindNetworkSpreadOrders(this, in, __current);
            }
            case 23:
            {
                return ___FindProductPrice(this, in, __current);
            }
            case 24:
            {
                return ___FindPurchaseOrderDetail(this, in, __current);
            }
            case 25:
            {
                return ___FindPurchaseOrderDetailCountPaged(this, in, __current);
            }
            case 26:
            {
                return ___FindPurchaseOrderDetailPaged(this, in, __current);
            }
            case 27:
            {
                return ___FindPurchaseOrderDetailSpecial(this, in, __current);
            }
            case 28:
            {
                return ___FindReturnOrder(this, in, __current);
            }
            case 29:
            {
                return ___FindReturnOrderPaged(this, in, __current);
            }
            case 30:
            {
                return ___FindSecondReturnOrderByReturnNo(this, in, __current);
            }
            case 31:
            {
                return ___FindSecondReturnOrderList(this, in, __current);
            }
            case 32:
            {
                return ___FindSopProductInventoryList(this, in, __current);
            }
            case 33:
            {
                return ___FindSpBrandPage(this, in, __current);
            }
            case 34:
            {
                return ___FindSpCategoryPage(this, in, __current);
            }
            case 35:
            {
                return ___FindSpCategorySizeStandard(this, in, __current);
            }
            case 36:
            {
                return ___FindSpSizeTmp(this, in, __current);
            }
            case 37:
            {
                return ___FindSpSpfProductAttributeInfo(this, in, __current);
            }
            case 38:
            {
                return ___FindSpfProductMainColor(this, in, __current);
            }
            case 39:
            {
                return ___FindStockInfo(this, in, __current);
            }
            case 40:
            {
                return ___FindSuppliersById(this, in, __current);
            }
            case 41:
            {
                return ___FindSuppliersByName(this, in, __current);
            }
            case 42:
            {
                return ___FindSupplyInfo(this, in, __current);
            }
            case 43:
            {
                return ___FindSupplyInfoPage(this, in, __current);
            }
            case 44:
            {
                return ___GetLogisticsCompany(this, in, __current);
            }
            case 45:
            {
                return ___GetSupplierInfo(this, in, __current);
            }
            case 46:
            {
                return ___ModifySkuInventoryQuantity(this, in, __current);
            }
            case 47:
            {
                return ___PurchaseDetailError(this, in, __current);
            }
            case 48:
            {
                return ___PurchaseDetailEx(this, in, __current);
            }
            case 49:
            {
                return ___ReceiveSecondReturnOrder(this, in, __current);
            }
            case 50:
            {
                return ___SendArrivalAbnormalProcess(this, in, __current);
            }
            case 51:
            {
                return ___SendDirectoryDeliveryOrder(this, in, __current);
            }
            case 52:
            {
                return ___SendDirectoryDeliveryOrderError(this, in, __current);
            }
            case 53:
            {
                return ___SubmitSecondReturnOrderAbnormal(this, in, __current);
            }
            case 54:
            {
                return ___UpdateProductPrice(this, in, __current);
            }
            case 55:
            {
                return ___UpdateStock(this, in, __current);
            }
            case 56:
            {
                return ___UpdateStockList(this, in, __current);
            }
            case 57:
            {
                return ___UpdateStockNew(this, in, __current);
            }
            case 58:
            {
                return ___UpdateSupplyPrice(this, in, __current);
            }
            case 59:
            {
                return ___UpdateSupplyPriceSpecial(this, in, __current);
            }
            case 60:
            {
                return ___ice_id(this, in, __current);
            }
            case 61:
            {
                return ___ice_ids(this, in, __current);
            }
            case 62:
            {
                return ___ice_isA(this, in, __current);
            }
            case 63:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
