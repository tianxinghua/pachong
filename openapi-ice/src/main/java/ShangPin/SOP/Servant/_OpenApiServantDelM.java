// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OpenApiServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Servant;

public final class _OpenApiServantDelM extends Ice._ObjectDelM implements _OpenApiServantDel
{
    public boolean
    AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("AddPurchaseDetailToDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(deliveryOrderNo);
                StringListHelper.write(__os, purchaseOrderDetailNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("CreateDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(deliverOrder);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[]
    FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<String> ProductNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCommodityInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(Starttime);
                __os.writeString(Endtime);
                StringListHelper.write(__os, ProductNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] __ret;
                __ret = SopProductSkuIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuPage
    FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCommodityInfoPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(query);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage
    FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(deliveryOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage
    FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrderPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrderSend", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(deliveryOrderSend);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[]
    FindMoneyInfo(java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindMoneyInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            __og.writeEmptyParams();
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] __ret;
                __ret = SopCurrencyIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage
    FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetail", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(purchaseOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage
    FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetailPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage
    FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindReturnOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(returnOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage
    FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindReturnOrderPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[]
    FindStockInfo(String supplierId, java.util.List<String> SkuNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindStockInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                StringListHelper.write(__os, SkuNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret;
                __ret = SopSkuInventoryIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public java.util.Map<String, String>
    FindSuppliersById(String Id, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSuppliersById", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(Id);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                java.util.Map<String, String> __ret;
                __ret = SuppliersMapHelper.read(__is);
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public java.util.Map<String, String>
    FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSuppliersByName", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(Name);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                java.util.Map<String, String> __ret;
                __ret = SuppliersMapHelper.read(__is);
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[]
    FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSupplyInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(supply);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] __ret;
                __ret = SopSkuPriceApplyIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateStock", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SkuNo);
                __os.writeInt(InventoryQuantity);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateSupplyPrice", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(price);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }
}
