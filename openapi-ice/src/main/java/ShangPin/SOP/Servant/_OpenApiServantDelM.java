// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OpenApiServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Servant;

public final class _OpenApiServantDelM extends Ice._ObjectDelM implements _OpenApiServantDel
{
    public int
    AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("AddCommodity", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(productAdd);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                int __ret;
                __ret = __is.readInt();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("AddCommodityPic", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(ProductPicIce);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("AddPurchaseDetailToDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(deliveryOrderNo);
                StringListHelper.write(__os, purchaseOrderDetailNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    AddSecondReturnOrderAbnormalPic(String supplierId, int detailId, byte[] sbnormalpic, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("AddSecondReturnOrderAbnormalPic", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeInt(detailId);
                ImageByteArrayHelper.write(__os, sbnormalpic);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("CreateDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(deliverOrder);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    DeleteProduct(String supplierId, String SkuNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("DeleteProduct", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SkuNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    DirectUpdateStock(String supplierId, String SkuNo, String SupplierSkuNo, int InventoryQuantity, String PrewarningQuantity, String Freight, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("DirectUpdateStock", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SkuNo);
                __os.writeString(SupplierSkuNo);
                __os.writeInt(InventoryQuantity);
                __os.writeString(PrewarningQuantity);
                __os.writeString(Freight);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopAreaPage
    FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindAreaPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeInt(pageIndex);
                __os.writeInt(pageSize);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopAreaPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopAreaPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCategoryBrandAgreement", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(categoryNo);
                __os.writeString(brandNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementPage
    FindCategoryBrandAgreementPage(String supplierId, ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementQuery query, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCategoryBrandAgreementPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(query);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementPageHolder __ret = new ShangPin.SOP.Entity.Api.BaseDatas.SopCategoryBrandAgreementPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[]
    FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCommodityInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(Starttime);
                __os.writeString(Endtime);
                StringListHelper.write(__os, ProductNos);
                StringListHelper.write(__os, ProductModels);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] __ret;
                __ret = SopProductSkuIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuPage
    FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindCommodityInfoPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(query);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage
    FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(deliveryOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage
    FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrderPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDeliveryOrderSend", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(deliveryOrderSend);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[]
    FindDirectStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.List<java.lang.String> SupplierSkuNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDirectStockInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                StringListHelper.write(__os, SkuNos);
                StringListHelper.write(__os, SupplierSkuNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret;
                __ret = SopSkuInventoryIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderApi
    FindDirectoryPurchaseOrder(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDirectoryPurchaseOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(purchaseOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderApiHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderApiHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrder
    FindDirectoryPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDirectoryPurchaseOrderDetail", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(purchaseOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DirectPurchaseOrderHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderDetailPage
    FindDirectoryPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDirectoryPurchaseOrderDetailPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderDetailPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderPage
    FindDirectoryPurchaseOrderPage(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindDirectoryPurchaseOrderPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DirectoryPurchaseOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[]
    FindMoneyInfo(java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindMoneyInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            __og.writeEmptyParams();
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] __ret;
                __ret = SopCurrencyIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductPricePage
    FindProductPrice(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindProductPrice", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopProductPricePageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopProductPricePageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage
    FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetail", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(purchaseOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.DTO.PurchaseOrderInfoApiDto
    FindPurchaseOrderDetailCountPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetailCountPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.DTO.PurchaseOrderInfoApiDtoHolder __ret = new ShangPin.SOP.Entity.DTO.PurchaseOrderInfoApiDtoHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage
    FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetailPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage
    FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindPurchaseOrderDetailSpecial", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(purchaseOrderNo);
                __os.writeString(orderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage
    FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindReturnOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(returnOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage
    FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindReturnOrderPaged", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrder
    FindSecondReturnOrderByReturnNo(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSecondReturnOrderByReturnNo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(returnOrderNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderPage
    FindSecondReturnOrderList(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.SecondReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSecondReturnOrderList", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryPage
    FindSopProductInventoryList(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.SopSkuInventoryQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSopProductInventoryList", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(queryDto);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpBrandPage
    FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpBrandPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeInt(pageIndex);
                __os.writeInt(pageSize);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpBrandPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpBrandPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategoryPage
    FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpCategoryPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeInt(pageIndex);
                __os.writeInt(pageSize);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpCategoryPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpCategoryPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[]
    FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpCategorySizeStandard", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(CategoryNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] __ret;
                __ret = RSpCategorySizeStandardListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce
    FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpSizeTmp", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SizeTmpNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpSizeTmpIceHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpSizeTmpIceHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[]
    FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpSpfProductAttributeInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(CategoryNo);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] __ret;
                __ret = RSpfProductAttributeInfoIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[]
    FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSpfProductMainColor", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] __ret;
                __ret = RSpfProductMainColorListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[]
    FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindStockInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                StringListHelper.write(__os, SkuNos);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret;
                __ret = SopSkuInventoryIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public java.util.Map<java.lang.String, java.lang.String>
    FindSuppliersById(String Id, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSuppliersById", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(Id);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                java.util.Map<java.lang.String, java.lang.String> __ret;
                __ret = SuppliersMapHelper.read(__is);
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public java.util.Map<java.lang.String, java.lang.String>
    FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSuppliersByName", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(Name);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                java.util.Map<java.lang.String, java.lang.String> __ret;
                __ret = SuppliersMapHelper.read(__is);
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[]
    FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSupplyInfo", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(supply);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] __ret;
                __ret = SopSkuPriceApplyIceListHelper.read(__is);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyPage
    FindSupplyInfoPage(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Product.ProductPriceQueryDto supply, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("FindSupplyInfoPage", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(supply);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyPageHolder();
                __is.readObject(__ret);
                __is.readPendingObjects();
                __og.endReadParams();
                return __ret.value;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public java.util.List<java.lang.String>
    GetLogisticsCompany(String supplierId, String logisticsName, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("GetLogisticsCompany", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(logisticsName);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                java.util.List<java.lang.String> __ret;
                __ret = StringListHelper.read(__is);
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    ModifySkuInventoryQuantity(String supplierId, ShangPin.SOP.Entity.Api.Product.SopSupplierProductInventoryEditIce productInventory, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("ModifySkuInventoryQuantity", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(productInventory);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    PurchaseDetailError(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("PurchaseDetailError", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeObject(purchaseOrderEx);
                __os.writeString(supplierId);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("PurchaseDetailEx", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeObject(purchaseOrderEx);
                __os.writeString(supplierId);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    ReceiveSecondReturnOrder(String supplierId, String returnOrderNo, String returnOrderDetailId, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("ReceiveSecondReturnOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(returnOrderNo);
                __os.writeString(returnOrderDetailId);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    SendArrivalAbnormalProcess(String supplierId, ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderAbnormal purchaseOrderAbnormal, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("SendArrivalAbnormalProcess", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(purchaseOrderAbnormal);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    SendDirectoryDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.SendDeliveryOrder sendDeliveryOrder, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("SendDirectoryDeliveryOrder", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(sendDeliveryOrder);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public String
    SendDirectoryDeliveryOrderError(String supplierId, ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx deliveryOrderEx, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("SendDirectoryDeliveryOrderError", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(deliveryOrderEx);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                String __ret;
                __ret = __is.readString();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    SubmitSecondReturnOrderAbnormal(String supplierId, ShangPin.SOP.Entity.Api.Purchase.SopSecondReturnOrderSupply secondReturnOrderDetail, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("SubmitSecondReturnOrderAbnormal", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(secondReturnOrderDetail);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateProductPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductPriceEditIce productPrice, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateProductPrice", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(productPrice);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateStock", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SkuNo);
                __os.writeInt(InventoryQuantity);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateStockNew(String supplierId, String SkuNo, String SupplierSkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateStockNew", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeString(SkuNo);
                __os.writeString(SupplierSkuNo);
                __os.writeInt(InventoryQuantity);
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateSupplyPrice", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(price);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }

    public boolean
    UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
        throws IceInternal.LocalExceptionWrapper,
               ShangPin.SOP.Api.ApiException
    {
        IceInternal.Outgoing __og = __handler.getOutgoing("UpdateSupplyPriceSpecial", Ice.OperationMode.Idempotent, __ctx, __observer);
        try
        {
            try
            {
                IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
                __os.writeString(supplierId);
                __os.writeObject(price);
                __os.writePendingObjects();
                __og.endWriteParams();
            }
            catch(Ice.LocalException __ex)
            {
                __og.abort(__ex);
            }
            boolean __ok = __og.invoke();
            try
            {
                if(!__ok)
                {
                    try
                    {
                        __og.throwUserException();
                    }
                    catch(ShangPin.SOP.Api.ApiException __ex)
                    {
                        throw __ex;
                    }
                    catch(Ice.UserException __ex)
                    {
                        throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                    }
                }
                IceInternal.BasicStream __is = __og.startReadParams();
                boolean __ret;
                __ret = __is.readBool();
                __og.endReadParams();
                return __ret;
            }
            catch(Ice.LocalException __ex)
            {
                throw new IceInternal.LocalExceptionWrapper(__ex, false);
            }
        }
        finally
        {
            __handler.reclaimOutgoing(__og);
        }
    }
}
