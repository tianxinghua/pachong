<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shangpin.iog.product.dao.ProductsMapper">

	<resultMap id="ProductsResultMap" type="iog_product">
		<id column="id" property="id" />

        <result column="supplier_id" property="supplierId"/>
        <result column="supplier_name" property="supplierName"/>

        <result column="spu_name" property="spuName" />
        <result column="spu_id" property="spuId"/>

		<result column="product_code" property="productCode"  />

		<result column="newseason_id" property="newseasonId"  />
        <result column="newseason_name" property="newseasonName"  />
		
		<result column="season_id" property="seasonId"  />
        <result column="season_name" property="seasonName"  />

        <result column="category_gender" property="categoryGender"  />

		<result column="category_id" property="categoryId"  />
        <result column="category_name" property="categoryName"  />

        <result column="sub_category_id" property="subCategoryId"/>
        <result column="sub_category_name" property="subCategoryName" />


        <result column="brand_id" property="brandId"  />
        <result column="brand_name" property="brandName"  />

		<result column="memo" property="memo"  />

		<result column="pic_url" property="picUrl"  />
        <result column="material" property="material"/>
        <result column="product_origin" property="productOrigin"/>

		<result column="product_origin" property="productOrigin"/>


        <result column="sku_id" property="skuId"  />
        <result column="product_name" property="productName" />
        <result column="market_price" property="marketPrice"/>
        <result column="sale_price" property="salePrice"/>
        <result column="supplier_price" property="supplierPrice"/>
        <result column="sale_currency" property="saleCurrency"/>
        <result column="product_description" property="productDescription"  />
        <result column="barcode" property="barcode" />
        <result column="product_size" property="size" />
        <result column="color" property="color" />
        <result column="stock" property="stock" />

        <result column="eventStartTime" property="eventStartTime" />
        <result column="eventEndTime" property="eventEndTime" />
	
        <result column="newMarketPrice" property="newMarketPrice" />
        <result column="newSalePrice" property="newSalePrice" />
        <result column="newSupplierPrice" property="newSupplierPrice" />
        <result column="spSkuId" property="spSkuId" />


	</resultMap>

    <resultMap id="barcodeResultMap" type="iog_spec_product">


        <result column="supplier_id" property="supplierId"/>

        <result column="sku_id" property="skuId"  />

        <result column="barcode" property="barcode" />


    </resultMap>

	
	
	<sql id="all_products_column">
		id ,
		product_id ,
		producer_id,
		p_type,
        season,
        product_name,
        description,
        category,
        url,
        supply_price,
        item_id,barcode,item_size,color,stock,pictures,product_detail
	</sql>
	

	<select id="findListBySupplierAndLastDate"  resultMap="ProductsResultMap">
		
		select
          sku.ID as id,
          sku.SUPPLIER_ID  as supplier_id,
          su.SUPPLIER_NAME as supplier_name,
          sku.SPU_ID  as spu_id,
          sku.SKU_ID as sku_id,spu.SPU_NAME as spu_name,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,sku.BARCODE as barcode,
          sku.PRODUCT_CODE as product_code,sku.COLOR as color,
          sku.PRODUCT_DESCRIPTION as product_description,
          sku.SALE_CURRENCY as sale_currency,sku.PRODUCT_SIZE as product_size,
          sku.STOCK as stock ,
          
          sku.EVENT_START_DATE as eventStartTime,
          sku.EVENT_END_DATE as eventEndTime,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          sku.SP_SKU_ID as spSkuId,
          
          spu.CATEGORY_ID as category_id, 
          spu.CATEGORY_NAME as category_name,
          spu.BRAND_ID as brand_id,spu.BRAND_NAME as brand_name,
          spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,
          spu.PIC_URL as pic_url,spu.MATERIAL as material,spu.PRODUCT_ORIGIN as product_origin ,
          spu.CATEGORY_GENDER as category_gender,
          spu.SUB_CATEGORY_ID  as  sub_category_id,
          spu.SUB_CATEGORY_NAME  as  sub_category_name,
          spu.NEWSEASON_ID as newseasonId,
          spu.NEWSEASON_NAME as newseasonName,          
<!--           sku.MEMO  as  memo -->
          CONCAT(sku.MEMO) as memo
		
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
					 left join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID
        <where>

            sku.STOCK >0

          <if test="null!=supplier">
            and   sku.SUPPLIER_ID = #{supplier}
          </if>
            <if test="null!=startDate">
                and (sku.LAST_TIME >= #{startDate} )
            </if>
           <if test="endDate!=null">

                <![CDATA[ and (sku.LAST_TIME <= #{endDate})    ]]>

            </if>



        </where>
        order by brand_name, category_name


	</select>
	
	<select id="findListOfAllSupplier"  resultMap="ProductsResultMap">
		select
          sku.ID as id,
          sku.SUPPLIER_ID  as supplier_id,
          su.SUPPLIER_NAME as supplier_name,
          sku.SPU_ID  as spu_id,
          sku.SKU_ID as sku_id,spu.SPU_NAME as spu_name,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,sku.BARCODE as barcode,
          sku.PRODUCT_CODE as product_code,sku.COLOR as color,
          sku.PRODUCT_DESCRIPTION as product_description,
          sku.SALE_CURRENCY as sale_currency,sku.PRODUCT_SIZE as product_size,
          sku.STOCK as stock ,
          
          sku.EVENT_START_DATE as eventStartTime,
          sku.EVENT_END_DATE as eventEndTime,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          
          spu.CATEGORY_ID as category_id, 
          spu.CATEGORY_NAME as category_name,
          spu.BRAND_ID as brand_id,spu.BRAND_NAME as brand_name,
          spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,
          spu.PIC_URL as pic_url,spu.MATERIAL as material,spu.PRODUCT_ORIGIN as product_origin ,
          spu.CATEGORY_GENDER as category_gender,
          spu.SUB_CATEGORY_ID  as  sub_category_id,
          spu.SUB_CATEGORY_NAME  as  sub_category_name,
		  sku.MEMO  as  memo,
		  spu.NEWSEASON_ID as newseasonId,
          spu.NEWSEASON_NAME as newseasonName
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
			 left join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID
        <where>

            sku.STOCK >0 and su.SUPPLIER_STATE = '1'

            <if test="null!=startDate">
                and sku.LAST_TIME >= #{startDate}
            </if>
           <if test="endDate!=null">

                <![CDATA[ and sku.LAST_TIME <= #{endDate}    ]]>

            </if>



        </where>
        order by supplier_name


	</select>
	
	<select id="findSkuIdbySupplier"  resultMap="ProductsResultMap">
		select
           sku.SKU_ID as sku_id
		from SKU sku
        <where>
          <if test="null!=supplier">
            and  SUPPLIER_ID = #{supplier}
          </if>
            <if test="null!=startDate">
                and LAST_TIME >= #{startDate}
            </if>
           <if test="endDate!=null">

                <![CDATA[ and LAST_TIME <= #{endDate}    ]]>

            </if>
        </where>
  


	</select>
	

	
	
	<select id="findDiffListBySupplierAndLastDate"  resultMap="ProductsResultMap">
		select
          sku.ID as id,
          sku.SKU_ID as sku_id,
          sku.SUPPLIER_ID  as supplier_id,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,
          sku.PRODUCT_CODE as product_code,
          
          sku.SALE_CURRENCY as sale_currency,
          sku.STOCK as stock ,
          
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          spu.BRAND_NAME as brand_name,
          spu.CATEGORY_NAME as category_name,
          spu.CATEGORY_GENDER as category_gender,
          spu.NEWSEASON_ID as newseasonId,
          spu.NEWSEASON_NAME as newseasonName,
		  sku.MEMO  as  memo
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
        <where>
				(
				IF(NEW_MARKET_PRICE !="",IF(NEW_MARKET_PRICE != MARKET_PRICE,TRUE,FALSE),FALSE)
				OR IF(NEW_SALE_PRICE != "",IF(NEW_SALE_PRICE != SALE_PRICE,TRUE,FALSE),FALSE)
				OR IF(NEW_SUPPLIER_PRICE != "",IF(NEW_SUPPLIER_PRICE != SUPPLIER_PRICE,TRUE,FALSE),FALSE))
          <if test="'-1'!=supplier">
            and   sku.SUPPLIER_ID = #{supplier}
          </if>
          <if test="null!=startDate">
                and sku.LAST_TIME >= #{startDate}
          </if>
          <if test="endDate!=null">
                <![CDATA[ and sku.LAST_TIME <= #{endDate}    ]]>
          </if>

		
        </where>
        order by supplier_id,brand_name, category_name


	</select>



	<select id="findDiffSeasonProducts"  resultMap="ProductsResultMap">
		select
          sku.ID as id,
          sku.SKU_ID as sku_id,
          sku.SUPPLIER_ID  as supplier_id,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,
          sku.PRODUCT_CODE as product_code,
          
          sku.SALE_CURRENCY as sale_currency,
          sku.STOCK as stock ,
          
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          spu.SPU_ID as spuId,
          spu.BRAND_NAME as brand_name,
          spu.CATEGORY_NAME as category_name,
          spu.CATEGORY_GENDER as category_gender,
          spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,
          spu.NEWSEASON_ID as newseasonId,
          spu.NEWSEASON_NAME as newseasonName,
		  sku.MEMO  as  memo
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
        <where>
				(
				IF(spu.NEWSEASON_NAME !="",IF(spu.SEASON_NAME != spu.NEWSEASON_NAME,TRUE,FALSE),FALSE)
				OR IF(spu.NEWSEASON_ID != "",IF(spu.SEASON_ID != spu.NEWSEASON_ID,TRUE,FALSE),FALSE)
				)
          <if test="'-1'!=supplier">
            and   sku.SUPPLIER_ID = #{supplier}
          </if>
          <if test="null!=startDate">
                and sku.LAST_TIME >= #{startDate}
          </if>
          <if test="endDate!=null">
                <![CDATA[ and sku.LAST_TIME <= #{endDate}    ]]>
          </if>

		
        </where>
        order by supplier_id,brand_name, category_name


	</select>


    <select id="findProductBySupplierIdAndSkuId" resultMap="ProductsResultMap">
        select
        sku.SPU_ID  as spu_id,
        sku.SKU_ID as sku_id,
        spu.SPU_NAME as spu_name,
        sku.PRODUCT_NAME as product_name,
        sku.PRODUCT_CODE as product_code,sku.COLOR as color,
        sku.SALE_CURRENCY as sale_currency,
        sku.PRODUCT_SIZE as product_size,
        spu.CATEGORY_NAME as category_name,
        spu.BRAND_NAME as brand_name,
        spu.SEASON_NAME as season_name,
        spu.MATERIAL as material,
        spu.PRODUCT_ORIGIN as product_origin ,
        spu.CATEGORY_GENDER as category_gender,
        spu.SUB_CATEGORY_NAME  as  sub_category_name

        from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID

        where  sku.SUPPLIER_ID = #{supplierId}   and   sku.SKU_ID = #{skuId}
     </select>

    <select id="findProductOfSpecBySupplierIdAndSkuId" resultMap="barcodeResultMap">
        select
        SUPPLIER_ID as  supplier_id,
        SKU_ID as sku_id,
        BARCODE as barcode

        from SKU

        where  SUPPLIER_ID = #{supplierId}   and   SKU_ID = #{skuId}
    </select>



	<select id="findProductOrderDTOList" resultMap="ProductsResultMap">
		select
          sku.SKU_ID as sku_id,
          sku.SPU_ID as spu_id,
          sku.SUPPLIER_ID  as supplier_id,

          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,
          sku.PRODUCT_CODE as product_code,
          sku.STOCK as stock ,
          sku.PRODUCT_SIZE as size,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          spu.BRAND_NAME as brand_name,
          spu.CATEGORY_NAME as category_name
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
        <where>
          <if test="null!=supplierId">
            and   sku.SUPPLIER_ID = #{supplierId}
          </if>
          <if test="null!=skuId">
            and   sku.SKU_ID = #{skuId}
          </if>

        </where>

	</select>


	<select id="findListByEPRegularAndLastDate"  resultMap="ProductsResultMap">
		
		select
          sku.ID as id,
          sku.SUPPLIER_ID  as supplier_id,
          su.SUPPLIER_NAME as supplier_name,
          sku.SPU_ID  as spu_id,
          sku.SKU_ID as sku_id,spu.SPU_NAME as spu_name,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,sku.BARCODE as barcode,
          sku.PRODUCT_CODE as product_code,sku.COLOR as color,
          sku.PRODUCT_DESCRIPTION as product_description,
          sku.SALE_CURRENCY as sale_currency,sku.PRODUCT_SIZE as product_size,
          sku.STOCK as stock ,
          
          sku.EVENT_START_DATE as eventStartTime,
          sku.EVENT_END_DATE as eventEndTime,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          
          sku.SP_SKU_ID as spSkuId,
          
          spu.CATEGORY_ID as category_id, 
          spu.CATEGORY_NAME as category_name,
          spu.BRAND_ID as brand_id,spu.BRAND_NAME as brand_name,
          spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,
          spu.PIC_URL as pic_url,spu.MATERIAL as material,spu.PRODUCT_ORIGIN as product_origin ,
          spu.CATEGORY_GENDER as category_gender,
          spu.SUB_CATEGORY_ID  as  sub_category_id,
          spu.SUB_CATEGORY_NAME  as  sub_category_name,
<!--           sku.MEMO  as  memo -->
          CONCAT(sku.MEMO) as memo
		
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
					 left join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID
        <where>

             sku.STOCK >0 
            and spu.BRAND_NAME in (select BRAND_NAME from EP_REGULAR)
            <!-- and spu.CATEGORY_NAME not in (select CATEGORY_NAME from EP_REGULAR) -->
            <!-- and sku.PRODUCT_SIZE not in (select PRODUCT_SIZE from EP_REGULAR) -->
            <!-- and spu.SEASON_NAME not in (select SEASON_NAME from EP_REGULAR)
            and spu.CATEGORY_GENDER not in (select GENDER from EP_REGULAR) -->
            and IF(spu.SEASON_NAME is null,true,spu.SEASON_NAME not in (select SEASON_NAME from EP_REGULAR where SEASON_NAME!=""))
            and IF(spu.CATEGORY_GENDER is null,true,spu.CATEGORY_GENDER not in (select GENDER from EP_REGULAR where GENDER !=""))
            and IF(spu.CATEGORY_NAME is null,true,spu.CATEGORY_NAME not in (select CATEGORY_NAME from EP_REGULAR where CATEGORY_NAME != ""))
            
          <if test="null!=supplier">
            and   sku.SUPPLIER_ID = #{supplier}
          </if>
            <if test="null!=startDate">
                and (sku.LAST_TIME >= #{startDate})
            </if>
           <if test="endDate!=null">

                <![CDATA[ and (sku.LAST_TIME <= #{endDate})    ]]>

            </if>



        </where>
        order by brand_name, category_name


	</select>
	
	<select id="findPicNameListByEPRegularAndLastDate" resultMap="ProductsResultMap">
	   select
          sku.ID as id,
          sku.SUPPLIER_ID  as supplier_id,
          su.SUPPLIER_NAME as supplier_name,
          sku.SPU_ID  as spu_id,
          sku.SKU_ID as sku_id,
          spu.SPU_NAME as spu_name,

          sku.PRODUCT_NAME as product_name,
          sku.BARCODE as barcode,
          sku.PRODUCT_CODE as product_code,sku.COLOR as color,
          sku.PRODUCT_SIZE as product_size,
		
		  sku.SP_SKU_ID as spSkuId		
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
					 left join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID
        <where>
            sku.STOCK >0 
            and spu.BRAND_NAME in (SELECT `VALUE` from EP_RULE ep where ep.FLAG=2 and ep.YN =1)
            and IF(spu.CATEGORY_NAME is null,true,spu.CATEGORY_NAME not in (SELECT `VALUE` from EP_RULE ep where ep.FLAG=3 and ep.YN =1))
            and IF(spu.SEASON_NAME is null,true,spu.SEASON_NAME not in (SELECT `VALUE` from EP_RULE ep where ep.FLAG=5 and ep.YN =1))
            and IF(spu.CATEGORY_GENDER is null,true,spu.CATEGORY_GENDER not in (SELECT `VALUE` from EP_RULE ep where ep.FLAG=6 and ep.YN =1))

          <if test="null!=supplier">
            and   sku.SUPPLIER_ID = #{supplier}
          </if>
            <if test="null!=startDate">
                and (sku.LAST_TIME >= #{startDate} or spu.LAST_TIME >=#{startDate})
            </if>
           <if test="endDate!=null">
                <![CDATA[ and (sku.LAST_TIME <= #{endDate} or spu.LAST_TIME<= #{endDate})    ]]>
            </if>
        </where>
        order by brand_name, category_name
	</select>
	
	<select id="findDiffPriceProducts" resultMap="ProductsResultMap">
		select
          sku.SKU_ID as sku_id,
          sku.SUPPLIER_ID  as supplier_id,
          
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,
          sku.PRODUCT_CODE as product_code,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice
          
		from SKU sku 
        <where>
        		sku.SUPPLIER_ID = #{supplier}
				and (
				IF(NEW_MARKET_PRICE !="",IF(NEW_MARKET_PRICE != MARKET_PRICE,TRUE,FALSE),FALSE)
				OR IF(NEW_SALE_PRICE != "",IF(NEW_SALE_PRICE != SALE_PRICE,TRUE,FALSE),FALSE)
				OR IF(NEW_SUPPLIER_PRICE != "",IF(NEW_SUPPLIER_PRICE != SUPPLIER_PRICE,TRUE,FALSE),FALSE))          
          <if test="null!=startDate">
                and sku.LAST_TIME >= #{startDate}
          </if>
          <if test="endDate!=null">
                <![CDATA[ and sku.LAST_TIME <= #{endDate}    ]]>
          </if>	
        </where>
	</select>
	
	<select id="findListInTheCategory" resultMap="ProductsResultMap"> 
		select
          sku.ID as id,
          sku.SUPPLIER_ID  as supplier_id,
          su.SUPPLIER_NAME as supplier_name,
          sku.SPU_ID  as spu_id,
          sku.SKU_ID as sku_id,spu.SPU_NAME as spu_name,

          sku.PRODUCT_NAME as product_name,
          sku.MARKET_PRICE  as market_price,
          sku.SALE_PRICE  as  sale_price,
          sku.SUPPLIER_PRICE as supplier_price,sku.BARCODE as barcode,
          sku.PRODUCT_CODE as product_code,sku.COLOR as color,
          sku.PRODUCT_DESCRIPTION as product_description,
          sku.SALE_CURRENCY as sale_currency,sku.PRODUCT_SIZE as product_size,
          sku.STOCK as stock ,
          
          sku.EVENT_START_DATE as eventStartTime,
          sku.EVENT_END_DATE as eventEndTime,
          
          sku.NEW_MARKET_PRICE as newMarketPrice,
          sku.NEW_SALE_PRICE as newSalePrice,
          sku.NEW_SUPPLIER_PRICE as newSupplierPrice,
          sku.SP_SKU_ID as spSkuId,
          
          spu.CATEGORY_ID as category_id, 
          spu.CATEGORY_NAME as category_name,
          spu.BRAND_ID as brand_id,spu.BRAND_NAME as brand_name,
          spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,
          spu.PIC_URL as pic_url,spu.MATERIAL as material,spu.PRODUCT_ORIGIN as product_origin ,
          spu.CATEGORY_GENDER as category_gender,
          spu.SUB_CATEGORY_ID  as  sub_category_id,
          spu.SUB_CATEGORY_NAME  as  sub_category_name,
          spu.NEWSEASON_ID as newseasonId,
          spu.NEWSEASON_NAME as newseasonName,  
          CONCAT(sku.MEMO) as memo
		
		from SKU sku left join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
					 left join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID
        <where>
            sku.STOCK >0
          <if test="null!=supplier">
            and  sku.SUPPLIER_ID = #{supplier}
          </if>          
          <if test="null!=startDate">
            and (sku.LAST_TIME >= #{startDate} )
          </if>
          <if test="endDate!=null">
            <![CDATA[ and (sku.LAST_TIME <= #{endDate}) ]]>
		  </if>
		  
		  <choose>
		  	<when test="BuParamDTO.isExport_gender == '1'.toString()">
		  		<if test="null != BuParamDTO.genders and BuParamDTO.genders.size()>0">
		          	and spu.CATEGORY_GENDER in
		          	<foreach collection="BuParamDTO.genders" index="index" item="item" open="(" separator="," close=")"> 
		            	#{item} 
		        	 </foreach>
		        </if>
		  	</when>
		  	<when test="BuParamDTO.isExport_gender == '0'.toString()">
		  		<if test="null != BuParamDTO.genders and BuParamDTO.genders.size()>0">
		          	and spu.CATEGORY_GENDER not in
		          	<foreach collection="BuParamDTO.genders" index="index" item="item" open="(" separator="," close=")"> 
		            	#{item} 
		        	 </foreach>
	          	</if>
		  	</when>
		  </choose>
		            
          <choose>
          	<when test="BuParamDTO.isExport_cat == '1'.toString()">
          		<if test="null != BuParamDTO.categories and BuParamDTO.categories.size()>0">
			  	and (spu.SUB_CATEGORY_NAME in 
	        	 <foreach collection="BuParamDTO.categories" index="index" item="item" open="(" separator="," close=")"> 
	            	#{item} 
	        	 </foreach> 
	        	 or spu.CATEGORY_NAME in 
	        	 <foreach collection="BuParamDTO.categories" index="index" item="item" open="(" separator="," close=")"> 
	            	#{item} 
	        	 </foreach> 
	        	 )       	
			  </if>	
          	</when>
          	<when test="BuParamDTO.isExport_cat == '0'.toString()">
          		<if test="null != BuParamDTO.categories and BuParamDTO.categories.size()>0">
			  	and (spu.SUB_CATEGORY_NAME not in 
	        	 <foreach collection="BuParamDTO.categories" index="index" item="item" open="(" separator="," close=")"> 
	            	#{item} 
	        	 </foreach> 
	        	 and spu.CATEGORY_NAME not in 
	        	 <foreach collection="BuParamDTO.categories" index="index" item="item" open="(" separator="," close=")"> 
	            	#{item} 
	        	 </foreach> 
	        	 )       	
			  </if>
          	</when>
          </choose>
		  	  
		  <choose>
		  	<when test="BuParamDTO.isExport_brand == '1'.toString()">
		  		<if test="null != BuParamDTO.brands and BuParamDTO.brands.size()>0">
				  	and spu.BRAND_NAME in
		          	<foreach collection="BuParamDTO.brands" index="index" item="item" open="(" separator="," close=")"> 
		            	#{item} 
		        	 </foreach>
		  		</if>	
		  	</when>
		  	<when test="BuParamDTO.isExport_brand == '0'.toString()">
		  		<if test="null != BuParamDTO.brands and BuParamDTO.brands.size()>0">
				  	and spu.BRAND_NAME not in
		          	<foreach collection="BuParamDTO.brands" index="index" item="item" open="(" separator="," close=")"> 
		            	#{item} 
		        	 </foreach>
		  		</if>
		  	</when>
		  </choose>
		  
		  <if test="'男鞋'== BU or '女鞋' == BU">
		  	and (SELECT count(*) from SKU WHERE SUPPLIER_ID = #{supplier} and SPU_ID = spu.SPU_ID AND STOCK>2)>1
		  </if>
        </where>
        order by brand_name, category_name
	</select>


    <!--  统计 -->
    <select id="findReport"  resultMap="ProductsResultMap">

        select
        sku.ID as id,
        sku.SUPPLIER_ID  as supplier_id,
        su.SUPPLIER_NAME as supplier_name,
        sku.SKU_ID as sku_id,
        sku.SPU_ID  as spu_id,
        sku.MARKET_PRICE  as market_price,
        sku.SALE_PRICE  as  sale_price,
        sku.SUPPLIER_PRICE as supplier_price,
        sku.BARCODE as barcode,
        sku.PRODUCT_CODE as product_code,
        spu.CATEGORY_ID as category_id,
        spu.CATEGORY_NAME as category_name,
        spu.BRAND_ID as brand_id,spu.BRAND_NAME as brand_name,
        spu.SEASON_ID as season_id,spu.SEASON_NAME as season_name,

        spu.SUB_CATEGORY_ID  as  sub_category_id,
        spu.SUB_CATEGORY_NAME  as  sub_category_name,

        from SKU sku inner join SPU spu on sku.SUPPLIER_ID = spu.SUPPLIER_ID and sku.SPU_ID = spu.SPU_ID
        inner join SUPPLIER su on sku.SUPPLIER_ID = su.SUPPLIER_ID and su.SUPPLIER_STATE='1'
        inner join SEASON_RELATION season on spu.SUPPLIER_ID = season.SUPPLIER_ID AND   season.CURRENT_SEASON='1'

        <where>

            sku.STOCK >0    and spu.MATERIAL is not null and sku.SP_SKU_ID is  null
            and sku.COLOR is not null    and  sku.PRODUCT_SIZE is not null
            and spu.CATEGORY_GENDER is not null


        </where>
        order by supplier_id


    </select>
		
</mapper>