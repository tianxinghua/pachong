// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OpenApiServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ShangPin.SOP.Servant;

public final class OpenApiServantPrxHelper extends Ice.ObjectPrxHelperBase implements OpenApiServantPrx
{
    private static final String __AddCommodity_name = "AddCommodity";

    public int AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodity(supplierId, productAdd, null, false);
    }

    public int AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodity(supplierId, productAdd, __ctx, true);
    }

    private int AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "AddCommodity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("AddCommodity");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.AddCommodity(supplierId, productAdd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd)
    {
        return begin_AddCommodity(supplierId, productAdd, null, false, null);
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx)
    {
        return begin_AddCommodity(supplierId, productAdd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, Ice.Callback __cb)
    {
        return begin_AddCommodity(supplierId, productAdd, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddCommodity(supplierId, productAdd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, Callback_OpenApiServant_AddCommodity __cb)
    {
        return begin_AddCommodity(supplierId, productAdd, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx, Callback_OpenApiServant_AddCommodity __cb)
    {
        return begin_AddCommodity(supplierId, productAdd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddCommodity(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductAddIce productAdd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddCommodity_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddCommodity_name, __cb);
        try
        {
            __result.__prepare(__AddCommodity_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(productAdd);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_AddCommodity(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __AddCommodity_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __AddCommodityPic_name = "AddCommodityPic";

    public boolean AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodityPic(supplierId, ProductPicIce, null, false);
    }

    public boolean AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddCommodityPic(supplierId, ProductPicIce, __ctx, true);
    }

    private boolean AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "AddCommodityPic", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("AddCommodityPic");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.AddCommodityPic(supplierId, ProductPicIce, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, null, false, null);
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, Ice.Callback __cb)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, Callback_OpenApiServant_AddCommodityPic __cb)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx, Callback_OpenApiServant_AddCommodityPic __cb)
    {
        return begin_AddCommodityPic(supplierId, ProductPicIce, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddCommodityPic(String supplierId, ShangPin.SOP.Entity.Api.Product.ProductPicIce ProductPicIce, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddCommodityPic_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddCommodityPic_name, __cb);
        try
        {
            __result.__prepare(__AddCommodityPic_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(ProductPicIce);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_AddCommodityPic(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __AddCommodityPic_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __AddPurchaseDetailToDeliveryOrder_name = "AddPurchaseDetailToDeliveryOrder";

    public boolean AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null, false);
    }

    public boolean AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __ctx, true);
    }

    private boolean AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "AddPurchaseDetailToDeliveryOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("AddPurchaseDetailToDeliveryOrder");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null, false, null);
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, Ice.Callback __cb)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, Callback_OpenApiServant_AddPurchaseDetailToDeliveryOrder __cb)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, Callback_OpenApiServant_AddPurchaseDetailToDeliveryOrder __cb)
    {
        return begin_AddPurchaseDetailToDeliveryOrder(supplierId, deliveryOrderNo, purchaseOrderDetailNos, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddPurchaseDetailToDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.List<java.lang.String> purchaseOrderDetailNos, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddPurchaseDetailToDeliveryOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddPurchaseDetailToDeliveryOrder_name, __cb);
        try
        {
            __result.__prepare(__AddPurchaseDetailToDeliveryOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(deliveryOrderNo);
            StringListHelper.write(__os, purchaseOrderDetailNos);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_AddPurchaseDetailToDeliveryOrder(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __AddPurchaseDetailToDeliveryOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __CreateDeliveryOrder_name = "CreateDeliveryOrder";

    public String CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder)
        throws ShangPin.SOP.Api.ApiException
    {
        return CreateDeliveryOrder(supplierId, deliverOrder, null, false);
    }

    public String CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return CreateDeliveryOrder(supplierId, deliverOrder, __ctx, true);
    }

    private String CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "CreateDeliveryOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("CreateDeliveryOrder");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.CreateDeliveryOrder(supplierId, deliverOrder, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, null, false, null);
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, __ctx, true, null);
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, Ice.Callback __cb)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, null, false, __cb);
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, Callback_OpenApiServant_CreateDeliveryOrder __cb)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, null, false, __cb);
    }

    public Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, Callback_OpenApiServant_CreateDeliveryOrder __cb)
    {
        return begin_CreateDeliveryOrder(supplierId, deliverOrder, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_CreateDeliveryOrder(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderAdd deliverOrder, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__CreateDeliveryOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __CreateDeliveryOrder_name, __cb);
        try
        {
            __result.__prepare(__CreateDeliveryOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(deliverOrder);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_CreateDeliveryOrder(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __CreateDeliveryOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindAreaPage_name = "FindAreaPage";

    public ShangPin.SOP.Entity.Api.Product.SopAreaPage FindAreaPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindAreaPage(supplierId, pageIndex, pageSize, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SopAreaPage FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindAreaPage(supplierId, pageIndex, pageSize, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SopAreaPage FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindAreaPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindAreaPage");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindAreaPage(supplierId, pageIndex, pageSize, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, Ice.Callback __cb)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, Callback_OpenApiServant_FindAreaPage __cb)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindAreaPage __cb)
    {
        return begin_FindAreaPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindAreaPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindAreaPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindAreaPage_name, __cb);
        try
        {
            __result.__prepare(__FindAreaPage_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeInt(pageIndex);
            __os.writeInt(pageSize);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SopAreaPage end_FindAreaPage(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindAreaPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SopAreaPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopAreaPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindCategoryBrandAgreement_name = "FindCategoryBrandAgreement";

    public String FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, null, false);
    }

    public String FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __ctx, true);
    }

    private String FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindCategoryBrandAgreement", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindCategoryBrandAgreement");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, Ice.Callback __cb)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, Callback_OpenApiServant_FindCategoryBrandAgreement __cb)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindCategoryBrandAgreement __cb)
    {
        return begin_FindCategoryBrandAgreement(supplierId, categoryNo, brandNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindCategoryBrandAgreement(String supplierId, String categoryNo, String brandNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindCategoryBrandAgreement_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindCategoryBrandAgreement_name, __cb);
        try
        {
            __result.__prepare(__FindCategoryBrandAgreement_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(categoryNo);
            __os.writeString(brandNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_FindCategoryBrandAgreement(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindCategoryBrandAgreement_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindCommodityInfo_name = "FindCommodityInfo";

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindCommodityInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindCommodityInfo");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, null, false, null);
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, Ice.Callback __cb)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, Callback_OpenApiServant_FindCommodityInfo __cb)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindCommodityInfo __cb)
    {
        return begin_FindCommodityInfo(supplierId, Starttime, Endtime, ProductNos, ProductModels, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindCommodityInfo(String supplierId, String Starttime, String Endtime, java.util.List<java.lang.String> ProductNos, java.util.List<java.lang.String> ProductModels, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindCommodityInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindCommodityInfo_name, __cb);
        try
        {
            __result.__prepare(__FindCommodityInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(Starttime);
            __os.writeString(Endtime);
            StringListHelper.write(__os, ProductNos);
            StringListHelper.write(__os, ProductModels);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] end_FindCommodityInfo(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindCommodityInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SopProductSkuIce[] __ret;
            __ret = SopProductSkuIceListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindCommodityInfoPage_name = "FindCommodityInfoPage";

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuPage FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfoPage(supplierId, query, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuPage FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindCommodityInfoPage(supplierId, query, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SopProductSkuPage FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindCommodityInfoPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindCommodityInfoPage");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindCommodityInfoPage(supplierId, query, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query)
    {
        return begin_FindCommodityInfoPage(supplierId, query, null, false, null);
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx)
    {
        return begin_FindCommodityInfoPage(supplierId, query, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, Ice.Callback __cb)
    {
        return begin_FindCommodityInfoPage(supplierId, query, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindCommodityInfoPage(supplierId, query, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, Callback_OpenApiServant_FindCommodityInfoPage __cb)
    {
        return begin_FindCommodityInfoPage(supplierId, query, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindCommodityInfoPage __cb)
    {
        return begin_FindCommodityInfoPage(supplierId, query, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindCommodityInfoPage(String supplierId, ShangPin.SOP.Entity.Api.Product.SopProductSkuPageQuery query, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindCommodityInfoPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindCommodityInfoPage_name, __cb);
        try
        {
            __result.__prepare(__FindCommodityInfoPage_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(query);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SopProductSkuPage end_FindCommodityInfoPage(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindCommodityInfoPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SopProductSkuPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindDeliveryOrder_name = "FindDeliveryOrder";

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrder(String supplierId, String deliveryOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrder(supplierId, deliveryOrderNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrder(supplierId, deliveryOrderNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindDeliveryOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindDeliveryOrder");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindDeliveryOrder(supplierId, deliveryOrderNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, Callback_OpenApiServant_FindDeliveryOrder __cb)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindDeliveryOrder __cb)
    {
        return begin_FindDeliveryOrder(supplierId, deliveryOrderNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindDeliveryOrder(String supplierId, String deliveryOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindDeliveryOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindDeliveryOrder_name, __cb);
        try
        {
            __result.__prepare(__FindDeliveryOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(deliveryOrderNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage end_FindDeliveryOrder(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindDeliveryOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindDeliveryOrderPaged_name = "FindDeliveryOrderPaged";

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderPaged(supplierId, queryDto, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderPaged(supplierId, queryDto, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindDeliveryOrderPaged", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindDeliveryOrderPaged");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindDeliveryOrderPaged(supplierId, queryDto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, null, false, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, Callback_OpenApiServant_FindDeliveryOrderPaged __cb)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindDeliveryOrderPaged __cb)
    {
        return begin_FindDeliveryOrderPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindDeliveryOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.DeliveryOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindDeliveryOrderPaged_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindDeliveryOrderPaged_name, __cb);
        try
        {
            __result.__prepare(__FindDeliveryOrderPaged_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(queryDto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPage end_FindDeliveryOrderPaged(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindDeliveryOrderPaged_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindDeliveryOrderSend_name = "FindDeliveryOrderSend";

    public boolean FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderSend(supplierId, deliveryOrderSend, null, false);
    }

    public boolean FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindDeliveryOrderSend(supplierId, deliveryOrderSend, __ctx, true);
    }

    private boolean FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindDeliveryOrderSend", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindDeliveryOrderSend");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindDeliveryOrderSend(supplierId, deliveryOrderSend, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, null, false, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, Callback_OpenApiServant_FindDeliveryOrderSend __cb)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindDeliveryOrderSend __cb)
    {
        return begin_FindDeliveryOrderSend(supplierId, deliveryOrderSend, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindDeliveryOrderSend(String supplierId, ShangPin.SOP.Entity.Api.Purchase.DeliveryOrderSend deliveryOrderSend, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindDeliveryOrderSend_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindDeliveryOrderSend_name, __cb);
        try
        {
            __result.__prepare(__FindDeliveryOrderSend_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(deliveryOrderSend);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_FindDeliveryOrderSend(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindDeliveryOrderSend_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindMoneyInfo_name = "FindMoneyInfo";

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] FindMoneyInfo()
        throws ShangPin.SOP.Api.ApiException
    {
        return FindMoneyInfo(null, false);
    }

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] FindMoneyInfo(java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindMoneyInfo(__ctx, true);
    }

    private ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] FindMoneyInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindMoneyInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindMoneyInfo");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindMoneyInfo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindMoneyInfo()
    {
        return begin_FindMoneyInfo(null, false, null);
    }

    public Ice.AsyncResult begin_FindMoneyInfo(java.util.Map<String, String> __ctx)
    {
        return begin_FindMoneyInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_FindMoneyInfo(Ice.Callback __cb)
    {
        return begin_FindMoneyInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_FindMoneyInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindMoneyInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindMoneyInfo(Callback_OpenApiServant_FindMoneyInfo __cb)
    {
        return begin_FindMoneyInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_FindMoneyInfo(java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindMoneyInfo __cb)
    {
        return begin_FindMoneyInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindMoneyInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindMoneyInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindMoneyInfo_name, __cb);
        try
        {
            __result.__prepare(__FindMoneyInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] end_FindMoneyInfo(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindMoneyInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.BaseDatas.SopCurrencyIce[] __ret;
            __ret = SopCurrencyIceListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindPurchaseOrderDetail_name = "FindPurchaseOrderDetail";

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindPurchaseOrderDetail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindPurchaseOrderDetail");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, Callback_OpenApiServant_FindPurchaseOrderDetail __cb)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindPurchaseOrderDetail __cb)
    {
        return begin_FindPurchaseOrderDetail(supplierId, purchaseOrderNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindPurchaseOrderDetail(String supplierId, String purchaseOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindPurchaseOrderDetail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindPurchaseOrderDetail_name, __cb);
        try
        {
            __result.__prepare(__FindPurchaseOrderDetail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(purchaseOrderNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage end_FindPurchaseOrderDetail(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindPurchaseOrderDetail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindPurchaseOrderDetailPaged_name = "FindPurchaseOrderDetailPaged";

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailPaged(supplierId, queryDto, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailPaged(supplierId, queryDto, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindPurchaseOrderDetailPaged", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindPurchaseOrderDetailPaged");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindPurchaseOrderDetailPaged(supplierId, queryDto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, null, false, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, Callback_OpenApiServant_FindPurchaseOrderDetailPaged __cb)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindPurchaseOrderDetailPaged __cb)
    {
        return begin_FindPurchaseOrderDetailPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindPurchaseOrderDetailPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.PurchaseOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindPurchaseOrderDetailPaged_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindPurchaseOrderDetailPaged_name, __cb);
        try
        {
            __result.__prepare(__FindPurchaseOrderDetailPaged_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(queryDto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPage end_FindPurchaseOrderDetailPaged(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindPurchaseOrderDetailPaged_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindPurchaseOrderDetailSpecial_name = "FindPurchaseOrderDetailSpecial";

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindPurchaseOrderDetailSpecial", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindPurchaseOrderDetailSpecial");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, Callback_OpenApiServant_FindPurchaseOrderDetailSpecial __cb)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindPurchaseOrderDetailSpecial __cb)
    {
        return begin_FindPurchaseOrderDetailSpecial(supplierId, purchaseOrderNo, orderNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindPurchaseOrderDetailSpecial(String supplierId, String purchaseOrderNo, String orderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindPurchaseOrderDetailSpecial_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindPurchaseOrderDetailSpecial_name, __cb);
        try
        {
            __result.__prepare(__FindPurchaseOrderDetailSpecial_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(purchaseOrderNo);
            __os.writeString(orderNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPage end_FindPurchaseOrderDetailSpecial(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindPurchaseOrderDetailSpecial_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderDetailSpecialPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindReturnOrder_name = "FindReturnOrder";

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrder(String supplierId, String returnOrderNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrder(supplierId, returnOrderNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrder(supplierId, returnOrderNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindReturnOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindReturnOrder");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindReturnOrder(supplierId, returnOrderNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, Ice.Callback __cb)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, Callback_OpenApiServant_FindReturnOrder __cb)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindReturnOrder __cb)
    {
        return begin_FindReturnOrder(supplierId, returnOrderNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindReturnOrder(String supplierId, String returnOrderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindReturnOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindReturnOrder_name, __cb);
        try
        {
            __result.__prepare(__FindReturnOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(returnOrderNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage end_FindReturnOrder(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindReturnOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindReturnOrderPaged_name = "FindReturnOrderPaged";

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrderPaged(supplierId, queryDto, null, false);
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindReturnOrderPaged(supplierId, queryDto, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindReturnOrderPaged", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindReturnOrderPaged");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindReturnOrderPaged(supplierId, queryDto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, null, false, null);
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, Ice.Callback __cb)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, Callback_OpenApiServant_FindReturnOrderPaged __cb)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindReturnOrderPaged __cb)
    {
        return begin_FindReturnOrderPaged(supplierId, queryDto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindReturnOrderPaged(String supplierId, ShangPin.SOP.Entity.Where.OpenApi.Purchase.ReturnOrderQueryDto queryDto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindReturnOrderPaged_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindReturnOrderPaged_name, __cb);
        try
        {
            __result.__prepare(__FindReturnOrderPaged_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(queryDto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPage end_FindReturnOrderPaged(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindReturnOrderPaged_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder __ret = new ShangPin.SOP.Entity.Api.Purchase.ReturnOrderPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpBrandPage_name = "FindSpBrandPage";

    public ShangPin.SOP.Entity.Api.Product.SpBrandPage FindSpBrandPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpBrandPage(supplierId, pageIndex, pageSize, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpBrandPage FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpBrandPage(supplierId, pageIndex, pageSize, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpBrandPage FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpBrandPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpBrandPage");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpBrandPage(supplierId, pageIndex, pageSize, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, Ice.Callback __cb)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, Callback_OpenApiServant_FindSpBrandPage __cb)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpBrandPage __cb)
    {
        return begin_FindSpBrandPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpBrandPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpBrandPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpBrandPage_name, __cb);
        try
        {
            __result.__prepare(__FindSpBrandPage_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeInt(pageIndex);
            __os.writeInt(pageSize);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpBrandPage end_FindSpBrandPage(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpBrandPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpBrandPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpBrandPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpCategoryPage_name = "FindSpCategoryPage";

    public ShangPin.SOP.Entity.Api.Product.SpCategoryPage FindSpCategoryPage(String supplierId, int pageIndex, int pageSize)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategoryPage(supplierId, pageIndex, pageSize, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategoryPage FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategoryPage(supplierId, pageIndex, pageSize, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpCategoryPage FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpCategoryPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpCategoryPage");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpCategoryPage(supplierId, pageIndex, pageSize, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, Ice.Callback __cb)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, Callback_OpenApiServant_FindSpCategoryPage __cb)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpCategoryPage __cb)
    {
        return begin_FindSpCategoryPage(supplierId, pageIndex, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpCategoryPage(String supplierId, int pageIndex, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpCategoryPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpCategoryPage_name, __cb);
        try
        {
            __result.__prepare(__FindSpCategoryPage_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeInt(pageIndex);
            __os.writeInt(pageSize);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategoryPage end_FindSpCategoryPage(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpCategoryPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpCategoryPageHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpCategoryPageHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpCategorySizeStandard_name = "FindSpCategorySizeStandard";

    public ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] FindSpCategorySizeStandard(String supplierId, String CategoryNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategorySizeStandard(supplierId, CategoryNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpCategorySizeStandard(supplierId, CategoryNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpCategorySizeStandard", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpCategorySizeStandard");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpCategorySizeStandard(supplierId, CategoryNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, Ice.Callback __cb)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, Callback_OpenApiServant_FindSpCategorySizeStandard __cb)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpCategorySizeStandard __cb)
    {
        return begin_FindSpCategorySizeStandard(supplierId, CategoryNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpCategorySizeStandard(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpCategorySizeStandard_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpCategorySizeStandard_name, __cb);
        try
        {
            __result.__prepare(__FindSpCategorySizeStandard_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(CategoryNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] end_FindSpCategorySizeStandard(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpCategorySizeStandard_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpCategorySizeStandard[] __ret;
            __ret = RSpCategorySizeStandardListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpSizeTmp_name = "FindSpSizeTmp";

    public ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce FindSpSizeTmp(String supplierId, String SizeTmpNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSizeTmp(supplierId, SizeTmpNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSizeTmp(supplierId, SizeTmpNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpSizeTmp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpSizeTmp");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpSizeTmp(supplierId, SizeTmpNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, Ice.Callback __cb)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, Callback_OpenApiServant_FindSpSizeTmp __cb)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpSizeTmp __cb)
    {
        return begin_FindSpSizeTmp(supplierId, SizeTmpNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpSizeTmp(String supplierId, String SizeTmpNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpSizeTmp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpSizeTmp_name, __cb);
        try
        {
            __result.__prepare(__FindSpSizeTmp_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(SizeTmpNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpSizeTmpIce end_FindSpSizeTmp(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpSizeTmp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpSizeTmpIceHolder __ret = new ShangPin.SOP.Entity.Api.Product.SpSizeTmpIceHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpSpfProductAttributeInfo_name = "FindSpSpfProductAttributeInfo";

    public ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSpfProductAttributeInfo(supplierId, CategoryNo, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpSpfProductAttributeInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpSpfProductAttributeInfo");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, Ice.Callback __cb)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, Callback_OpenApiServant_FindSpSpfProductAttributeInfo __cb)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpSpfProductAttributeInfo __cb)
    {
        return begin_FindSpSpfProductAttributeInfo(supplierId, CategoryNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpSpfProductAttributeInfo(String supplierId, String CategoryNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpSpfProductAttributeInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpSpfProductAttributeInfo_name, __cb);
        try
        {
            __result.__prepare(__FindSpSpfProductAttributeInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(CategoryNo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] end_FindSpSpfProductAttributeInfo(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpSpfProductAttributeInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpfProductAttributeInfoIce[] __ret;
            __ret = RSpfProductAttributeInfoIceListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSpfProductMainColor_name = "FindSpfProductMainColor";

    public ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] FindSpfProductMainColor(String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpfProductMainColor(supplierId, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSpfProductMainColor(supplierId, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSpfProductMainColor", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSpfProductMainColor");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSpfProductMainColor(supplierId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId)
    {
        return begin_FindSpfProductMainColor(supplierId, null, false, null);
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx)
    {
        return begin_FindSpfProductMainColor(supplierId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, Ice.Callback __cb)
    {
        return begin_FindSpfProductMainColor(supplierId, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSpfProductMainColor(supplierId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, Callback_OpenApiServant_FindSpfProductMainColor __cb)
    {
        return begin_FindSpfProductMainColor(supplierId, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSpfProductMainColor __cb)
    {
        return begin_FindSpfProductMainColor(supplierId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSpfProductMainColor(String supplierId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSpfProductMainColor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSpfProductMainColor_name, __cb);
        try
        {
            __result.__prepare(__FindSpfProductMainColor_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] end_FindSpfProductMainColor(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSpfProductMainColor_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SpfProductMainColor[] __ret;
            __ret = RSpfProductMainColorListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindStockInfo_name = "FindStockInfo";

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindStockInfo(supplierId, SkuNos, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindStockInfo(supplierId, SkuNos, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindStockInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindStockInfo");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindStockInfo(supplierId, SkuNos, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos)
    {
        return begin_FindStockInfo(supplierId, SkuNos, null, false, null);
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx)
    {
        return begin_FindStockInfo(supplierId, SkuNos, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, Ice.Callback __cb)
    {
        return begin_FindStockInfo(supplierId, SkuNos, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindStockInfo(supplierId, SkuNos, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, Callback_OpenApiServant_FindStockInfo __cb)
    {
        return begin_FindStockInfo(supplierId, SkuNos, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindStockInfo __cb)
    {
        return begin_FindStockInfo(supplierId, SkuNos, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindStockInfo(String supplierId, java.util.List<java.lang.String> SkuNos, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindStockInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindStockInfo_name, __cb);
        try
        {
            __result.__prepare(__FindStockInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            StringListHelper.write(__os, SkuNos);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] end_FindStockInfo(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindStockInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SopSkuInventoryIce[] __ret;
            __ret = SopSkuInventoryIceListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSuppliersById_name = "FindSuppliersById";

    public java.util.Map<java.lang.String, java.lang.String> FindSuppliersById(String Id)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersById(Id, null, false);
    }

    public java.util.Map<java.lang.String, java.lang.String> FindSuppliersById(String Id, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersById(Id, __ctx, true);
    }

    private java.util.Map<java.lang.String, java.lang.String> FindSuppliersById(String Id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSuppliersById", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSuppliersById");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSuppliersById(Id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id)
    {
        return begin_FindSuppliersById(Id, null, false, null);
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id, java.util.Map<String, String> __ctx)
    {
        return begin_FindSuppliersById(Id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id, Ice.Callback __cb)
    {
        return begin_FindSuppliersById(Id, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSuppliersById(Id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id, Callback_OpenApiServant_FindSuppliersById __cb)
    {
        return begin_FindSuppliersById(Id, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersById(String Id, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSuppliersById __cb)
    {
        return begin_FindSuppliersById(Id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSuppliersById(String Id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSuppliersById_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSuppliersById_name, __cb);
        try
        {
            __result.__prepare(__FindSuppliersById_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(Id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.String, java.lang.String> end_FindSuppliersById(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSuppliersById_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.Map<java.lang.String, java.lang.String> __ret;
            __ret = SuppliersMapHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSuppliersByName_name = "FindSuppliersByName";

    public java.util.Map<java.lang.String, java.lang.String> FindSuppliersByName(String Name)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersByName(Name, null, false);
    }

    public java.util.Map<java.lang.String, java.lang.String> FindSuppliersByName(String Name, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSuppliersByName(Name, __ctx, true);
    }

    private java.util.Map<java.lang.String, java.lang.String> FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSuppliersByName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSuppliersByName");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSuppliersByName(Name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name)
    {
        return begin_FindSuppliersByName(Name, null, false, null);
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name, java.util.Map<String, String> __ctx)
    {
        return begin_FindSuppliersByName(Name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name, Ice.Callback __cb)
    {
        return begin_FindSuppliersByName(Name, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSuppliersByName(Name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name, Callback_OpenApiServant_FindSuppliersByName __cb)
    {
        return begin_FindSuppliersByName(Name, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSuppliersByName __cb)
    {
        return begin_FindSuppliersByName(Name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSuppliersByName(String Name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSuppliersByName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSuppliersByName_name, __cb);
        try
        {
            __result.__prepare(__FindSuppliersByName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(Name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.String, java.lang.String> end_FindSuppliersByName(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSuppliersByName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.Map<java.lang.String, java.lang.String> __ret;
            __ret = SuppliersMapHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __FindSupplyInfo_name = "FindSupplyInfo";

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSupplyInfo(supplierId, supply, null, false);
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return FindSupplyInfo(supplierId, supply, __ctx, true);
    }

    private ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "FindSupplyInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("FindSupplyInfo");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.FindSupplyInfo(supplierId, supply, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply)
    {
        return begin_FindSupplyInfo(supplierId, supply, null, false, null);
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx)
    {
        return begin_FindSupplyInfo(supplierId, supply, __ctx, true, null);
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, Ice.Callback __cb)
    {
        return begin_FindSupplyInfo(supplierId, supply, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FindSupplyInfo(supplierId, supply, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, Callback_OpenApiServant_FindSupplyInfo __cb)
    {
        return begin_FindSupplyInfo(supplierId, supply, null, false, __cb);
    }

    public Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, Callback_OpenApiServant_FindSupplyInfo __cb)
    {
        return begin_FindSupplyInfo(supplierId, supply, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_FindSupplyInfo(String supplierId, ShangPin.SOP.Entity.Api.Product.Supply supply, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FindSupplyInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __FindSupplyInfo_name, __cb);
        try
        {
            __result.__prepare(__FindSupplyInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(supply);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] end_FindSupplyInfo(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __FindSupplyInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ShangPin.SOP.Entity.Api.Product.SopSkuPriceApplyIce[] __ret;
            __ret = SopSkuPriceApplyIceListHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __PurchaseDetailEx_name = "PurchaseDetailEx";

    public String PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId)
        throws ShangPin.SOP.Api.ApiException
    {
        return PurchaseDetailEx(purchaseOrderEx, supplierId, null, false);
    }

    public String PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return PurchaseDetailEx(purchaseOrderEx, supplierId, __ctx, true);
    }

    private String PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "PurchaseDetailEx", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("PurchaseDetailEx");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.PurchaseDetailEx(purchaseOrderEx, supplierId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, null, false, null);
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, Ice.Callback __cb)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, null, false, __cb);
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, Callback_OpenApiServant_PurchaseDetailEx __cb)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, null, false, __cb);
    }

    public Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, Callback_OpenApiServant_PurchaseDetailEx __cb)
    {
        return begin_PurchaseDetailEx(purchaseOrderEx, supplierId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_PurchaseDetailEx(ShangPin.SOP.Entity.Api.Purchase.PurchaseOrderEx purchaseOrderEx, String supplierId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__PurchaseDetailEx_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __PurchaseDetailEx_name, __cb);
        try
        {
            __result.__prepare(__PurchaseDetailEx_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(purchaseOrderEx);
            __os.writeString(supplierId);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_PurchaseDetailEx(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __PurchaseDetailEx_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __UpdateStock_name = "UpdateStock";

    public boolean UpdateStock(String supplierId, String SkuNo, int InventoryQuantity)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStock(supplierId, SkuNo, InventoryQuantity, null, false);
    }

    public boolean UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateStock(supplierId, SkuNo, InventoryQuantity, __ctx, true);
    }

    private boolean UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "UpdateStock", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("UpdateStock");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.UpdateStock(supplierId, SkuNo, InventoryQuantity, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, Ice.Callback __cb)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, Callback_OpenApiServant_UpdateStock __cb)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, Callback_OpenApiServant_UpdateStock __cb)
    {
        return begin_UpdateStock(supplierId, SkuNo, InventoryQuantity, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateStock(String supplierId, String SkuNo, int InventoryQuantity, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateStock_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateStock_name, __cb);
        try
        {
            __result.__prepare(__UpdateStock_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeString(SkuNo);
            __os.writeInt(InventoryQuantity);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_UpdateStock(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __UpdateStock_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __UpdateSupplyPrice_name = "UpdateSupplyPrice";

    public boolean UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPrice(supplierId, price, null, false);
    }

    public boolean UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPrice(supplierId, price, __ctx, true);
    }

    private boolean UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "UpdateSupplyPrice", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("UpdateSupplyPrice");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.UpdateSupplyPrice(supplierId, price, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
    {
        return begin_UpdateSupplyPrice(supplierId, price, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateSupplyPrice(supplierId, price, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, Ice.Callback __cb)
    {
        return begin_UpdateSupplyPrice(supplierId, price, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateSupplyPrice(supplierId, price, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, Callback_OpenApiServant_UpdateSupplyPrice __cb)
    {
        return begin_UpdateSupplyPrice(supplierId, price, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Callback_OpenApiServant_UpdateSupplyPrice __cb)
    {
        return begin_UpdateSupplyPrice(supplierId, price, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateSupplyPrice(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateSupplyPrice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateSupplyPrice_name, __cb);
        try
        {
            __result.__prepare(__UpdateSupplyPrice_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(price);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_UpdateSupplyPrice(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __UpdateSupplyPrice_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __UpdateSupplyPriceSpecial_name = "UpdateSupplyPriceSpecial";

    public boolean UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPriceSpecial(supplierId, price, null, false);
    }

    public boolean UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx)
        throws ShangPin.SOP.Api.ApiException
    {
        return UpdateSupplyPriceSpecial(supplierId, price, __ctx, true);
    }

    private boolean UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ShangPin.SOP.Api.ApiException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "UpdateSupplyPriceSpecial", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("UpdateSupplyPriceSpecial");
                    __delBase = __getDelegate(false);
                    _OpenApiServantDel __del = (_OpenApiServantDel)__delBase;
                    return __del.UpdateSupplyPriceSpecial(supplierId, price, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, Ice.Callback __cb)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, Callback_OpenApiServant_UpdateSupplyPriceSpecial __cb)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, Callback_OpenApiServant_UpdateSupplyPriceSpecial __cb)
    {
        return begin_UpdateSupplyPriceSpecial(supplierId, price, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateSupplyPriceSpecial(String supplierId, ShangPin.SOP.Entity.Api.Product.SupplyPriceInfo price, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateSupplyPriceSpecial_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateSupplyPriceSpecial_name, __cb);
        try
        {
            __result.__prepare(__UpdateSupplyPriceSpecial_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(supplierId);
            __os.writeObject(price);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_UpdateSupplyPriceSpecial(Ice.AsyncResult __result)
        throws ShangPin.SOP.Api.ApiException
    {
        Ice.AsyncResult.__check(__result, this, __UpdateSupplyPriceSpecial_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(ShangPin.SOP.Api.ApiException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static OpenApiServantPrx checkedCast(Ice.ObjectPrx __obj)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof OpenApiServantPrx)
            {
                __d = (OpenApiServantPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static OpenApiServantPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof OpenApiServantPrx)
            {
                __d = (OpenApiServantPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static OpenApiServantPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static OpenApiServantPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static OpenApiServantPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof OpenApiServantPrx)
            {
                __d = (OpenApiServantPrx)__obj;
            }
            else
            {
                OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static OpenApiServantPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        OpenApiServantPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            OpenApiServantPrxHelper __h = new OpenApiServantPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ShangPin::SOP::Servant::OpenApiServant"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _OpenApiServantDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _OpenApiServantDelD();
    }

    public static void __write(IceInternal.BasicStream __os, OpenApiServantPrx v)
    {
        __os.writeProxy(v);
    }

    public static OpenApiServantPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            OpenApiServantPrxHelper result = new OpenApiServantPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
