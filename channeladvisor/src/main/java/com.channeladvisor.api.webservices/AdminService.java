package com.channeladvisor.api.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.2
 * 2015-08-10T14:22:53.334+08:00
 * Generated source version: 3.1.2
 * 
 */
@WebServiceClient(name = "AdminService", 
                  wsdlLocation = "https://api.channeladvisor.com/ChannelAdvisorAPI/v7/AdminService.asmx?WSDL",
                  targetNamespace = "http://api.channeladvisor.com/webservices/") 
public class AdminService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://api.channeladvisor.com/webservices/", "AdminService");
    public final static QName AdminServiceSoap12 = new QName("http://api.channeladvisor.com/webservices/", "AdminServiceSoap12");
    public final static QName AdminServiceSoap = new QName("http://api.channeladvisor.com/webservices/", "AdminServiceSoap");
    static {
        URL url = null;
        try {
            url = new URL("https://api.channeladvisor.com/ChannelAdvisorAPI/v7/AdminService.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AdminService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://api.channeladvisor.com/ChannelAdvisorAPI/v7/AdminService.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public AdminService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AdminService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AdminService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public AdminService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AdminService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AdminService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns AdminServiceSoap
     */
    @WebEndpoint(name = "AdminServiceSoap12")
    public AdminServiceSoap getAdminServiceSoap12() {
        return super.getPort(AdminServiceSoap12, AdminServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdminServiceSoap
     */
    @WebEndpoint(name = "AdminServiceSoap12")
    public AdminServiceSoap getAdminServiceSoap12(WebServiceFeature... features) {
        return super.getPort(AdminServiceSoap12, AdminServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns AdminServiceSoap
     */
    @WebEndpoint(name = "AdminServiceSoap")
    public AdminServiceSoap getAdminServiceSoap() {
        return super.getPort(AdminServiceSoap, AdminServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdminServiceSoap
     */
    @WebEndpoint(name = "AdminServiceSoap")
    public AdminServiceSoap getAdminServiceSoap(WebServiceFeature... features) {
        return super.getPort(AdminServiceSoap, AdminServiceSoap.class, features);
    }

}
